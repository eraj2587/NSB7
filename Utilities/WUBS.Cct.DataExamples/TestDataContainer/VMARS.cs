



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `VMaRS`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.;Initial Catalog=work_WUBS2_Trunk_VMARS;Integrated Security=True`
//     Schema:                 ``
//     Include Views:          `False`


using System;

namespace WUBS.Cct.DataExamples.TestDataContainer
{
    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "VMaRS")]
    public partial class VMaRSDB : StaticDataDatabase
    {
        public override string Name { get { return "VMaRS"; } }

        public VMaRSDB() : base()
        {
            Tables.Add("VSModificationHistory", new VSModificationHistory());
            Tables.Add("RSRepurchase", new RSRepurchase());
            Tables.Add("RSBuilder", new RSBuilder());

            InsertStaticData();
        }

        public System.Data.Linq.Table<VSModificationHistory.VSModificationHistoryRow> VSModificationHistoryTable
        {
            get
            {
                return this.GetTable<VSModificationHistory.VSModificationHistoryRow>();
            }
        }
        public System.Data.Linq.Table<RSRepurchase.RSRepurchaseRow> RSRepurchaseTable
        {
            get
            {
                return this.GetTable<RSRepurchase.RSRepurchaseRow>();
            }
        }
        public System.Data.Linq.Table<RSBuilder.RSBuilderRow> RSBuilderTable
        {
            get
            {
                return this.GetTable<RSBuilder.RSBuilderRow>();
            }
        }

        public partial class VSModificationHistory : StaticDataTable
        {
            public override string Name { get { return "VSModificationHistory"; } }
            public override Type RowType { get { return typeof(VSModificationHistoryRow); } }

            public VSModificationHistory() : base()
            {
            }

            [global::System.Data.Linq.Mapping.TableAttribute(Name = "VSModificationHistory")]
            public partial class VSModificationHistoryRow : StaticDataRow
            {

                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
                public int History_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("History_ID") || ColsAndValues["History_ID"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["History_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("History_ID"))
                            ColsAndValues.Add("History_ID", newValue);
                        else
                            ColsAndValues["History_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? HistoryGroup_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("HistoryGroup_ID") || ColsAndValues["HistoryGroup_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["HistoryGroup_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("HistoryGroup_ID"))
                            ColsAndValues.Add("HistoryGroup_ID", newValue);
                        else
                            ColsAndValues["HistoryGroup_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ClientOrder_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ClientOrder_ID") || ColsAndValues["ClientOrder_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ClientOrder_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ClientOrder_ID"))
                            ColsAndValues.Add("ClientOrder_ID", newValue);
                        else
                            ColsAndValues["ClientOrder_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false)]
                public int OrderDetail_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OrderDetail_ID") || ColsAndValues["OrderDetail_ID"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["OrderDetail_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OrderDetail_ID"))
                            ColsAndValues.Add("OrderDetail_ID", newValue);
                        else
                            ColsAndValues["OrderDetail_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255) ", CanBeNull = true)]
                public string PreviousComment
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("PreviousComment") || ColsAndValues["PreviousComment"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["PreviousComment"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("PreviousComment"))
                            ColsAndValues.Add("PreviousComment", newValue);
                        else
                            ColsAndValues["PreviousComment"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ModificationType
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ModificationType") || ColsAndValues["ModificationType"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ModificationType"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ModificationType"))
                            ColsAndValues.Add("ModificationType", newValue);
                        else
                            ColsAndValues["ModificationType"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(50) ", CanBeNull = true)]
                public string FieldModified
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("FieldModified") || ColsAndValues["FieldModified"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["FieldModified"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("FieldModified"))
                            ColsAndValues.Add("FieldModified", newValue);
                        else
                            ColsAndValues["FieldModified"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "ntext", CanBeNull = true)]
                public string PreviousValue
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("PreviousValue") || ColsAndValues["PreviousValue"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["PreviousValue"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("PreviousValue"))
                            ColsAndValues.Add("PreviousValue", newValue);
                        else
                            ColsAndValues["PreviousValue"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Mod_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Mod_ID") || ColsAndValues["Mod_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Mod_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Mod_ID"))
                            ColsAndValues.Add("Mod_ID", newValue);
                        else
                            ColsAndValues["Mod_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? ModifiedDateTime
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ModifiedDateTime") || ColsAndValues["ModifiedDateTime"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["ModifiedDateTime"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ModifiedDateTime"))
                            ColsAndValues.Add("ModifiedDateTime", newValue);
                        else
                            ColsAndValues["ModifiedDateTime"] = newValue;
                    }
                }
            } //end row
        } //end table
        public partial class RSRepurchase : StaticDataTable
        {
            public override string Name { get { return "RSRepurchase"; } }
            public override Type RowType { get { return typeof(RSRepurchaseRow); } }

            public RSRepurchase() : base()
            {
            }

            [global::System.Data.Linq.Mapping.TableAttribute(Name = "RSRepurchase")]
            public partial class RSRepurchaseRow : StaticDataRow
            {

                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ClientOrder_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ClientOrder_ID") || ColsAndValues["ClientOrder_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ClientOrder_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ClientOrder_ID"))
                            ColsAndValues.Add("ClientOrder_ID", newValue);
                        else
                            ColsAndValues["ClientOrder_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? PreviousClientOrder_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("PreviousClientOrder_ID") || ColsAndValues["PreviousClientOrder_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["PreviousClientOrder_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("PreviousClientOrder_ID"))
                            ColsAndValues.Add("PreviousClientOrder_ID", newValue);
                        else
                            ColsAndValues["PreviousClientOrder_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nchar(10) ", CanBeNull = true)]
                public string Investigation_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Investigation_ID") || ColsAndValues["Investigation_ID"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["Investigation_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Investigation_ID"))
                            ColsAndValues.Add("Investigation_ID", newValue);
                        else
                            ColsAndValues["Investigation_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(16) ", CanBeNull = true)]
                public string OriginalConfirmationNo
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OriginalConfirmationNo") || ColsAndValues["OriginalConfirmationNo"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["OriginalConfirmationNo"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OriginalConfirmationNo"))
                            ColsAndValues.Add("OriginalConfirmationNo", newValue);
                        else
                            ColsAndValues["OriginalConfirmationNo"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(2) ", CanBeNull = true)]
                public string ConfirmationNo_Extension
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ConfirmationNo_Extension") || ColsAndValues["ConfirmationNo_Extension"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["ConfirmationNo_Extension"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ConfirmationNo_Extension"))
                            ColsAndValues.Add("ConfirmationNo_Extension", newValue);
                        else
                            ColsAndValues["ConfirmationNo_Extension"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? MatchingClientOrder_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("MatchingClientOrder_ID") || ColsAndValues["MatchingClientOrder_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["MatchingClientOrder_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("MatchingClientOrder_ID"))
                            ColsAndValues.Add("MatchingClientOrder_ID", newValue);
                        else
                            ColsAndValues["MatchingClientOrder_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(250) ", CanBeNull = true)]
                public string Instructions
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Instructions") || ColsAndValues["Instructions"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["Instructions"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Instructions"))
                            ColsAndValues.Add("Instructions", newValue);
                        else
                            ColsAndValues["Instructions"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? initid
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("initid") || ColsAndValues["initid"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["initid"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("initid"))
                            ColsAndValues.Add("initid", newValue);
                        else
                            ColsAndValues["initid"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? initdt
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("initdt") || ColsAndValues["initdt"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["initdt"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("initdt"))
                            ColsAndValues.Add("initdt", newValue);
                        else
                            ColsAndValues["initdt"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? updid
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("updid") || ColsAndValues["updid"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["updid"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("updid"))
                            ColsAndValues.Add("updid", newValue);
                        else
                            ColsAndValues["updid"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? upddt
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("upddt") || ColsAndValues["upddt"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["upddt"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("upddt"))
                            ColsAndValues.Add("upddt", newValue);
                        else
                            ColsAndValues["upddt"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ApplicationID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ApplicationID") || ColsAndValues["ApplicationID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ApplicationID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ApplicationID"))
                            ColsAndValues.Add("ApplicationID", newValue);
                        else
                            ColsAndValues["ApplicationID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(50) ", CanBeNull = true)]
                public string AuthorizedBy
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("AuthorizedBy") || ColsAndValues["AuthorizedBy"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["AuthorizedBy"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("AuthorizedBy"))
                            ColsAndValues.Add("AuthorizedBy", newValue);
                        else
                            ColsAndValues["AuthorizedBy"] = newValue;
                    }
                }
            } //end row
        } //end table
        public partial class RSBuilder : StaticDataTable
        {
            public override string Name { get { return "RSBuilder"; } }
            public override Type RowType { get { return typeof(RSBuilderRow); } }

            public RSBuilder() : base()
            {
            }

            [global::System.Data.Linq.Mapping.TableAttribute(Name = "RSBuilder")]
            public partial class RSBuilderRow : StaticDataRow
            {

                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
                public int ClientOrder_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ClientOrder_ID") || ColsAndValues["ClientOrder_ID"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["ClientOrder_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ClientOrder_ID"))
                            ColsAndValues.Add("ClientOrder_ID", newValue);
                        else
                            ColsAndValues["ClientOrder_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ErrorSource
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ErrorSource") || ColsAndValues["ErrorSource"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ErrorSource"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ErrorSource"))
                            ColsAndValues.Add("ErrorSource", newValue);
                        else
                            ColsAndValues["ErrorSource"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? TargetRecon
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("TargetRecon") || ColsAndValues["TargetRecon"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["TargetRecon"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("TargetRecon"))
                            ColsAndValues.Add("TargetRecon", newValue);
                        else
                            ColsAndValues["TargetRecon"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? SettlementRecon
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("SettlementRecon") || ColsAndValues["SettlementRecon"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["SettlementRecon"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("SettlementRecon"))
                            ColsAndValues.Add("SettlementRecon", newValue);
                        else
                            ColsAndValues["SettlementRecon"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Reissue
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Reissue") || ColsAndValues["Reissue"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Reissue"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Reissue"))
                            ColsAndValues.Add("Reissue", newValue);
                        else
                            ColsAndValues["Reissue"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? NewAmount
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("NewAmount") || ColsAndValues["NewAmount"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["NewAmount"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("NewAmount"))
                            ColsAndValues.Add("NewAmount", newValue);
                        else
                            ColsAndValues["NewAmount"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Refund
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Refund") || ColsAndValues["Refund"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Refund"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Refund"))
                            ColsAndValues.Add("Refund", newValue);
                        else
                            ColsAndValues["Refund"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? BuyExtra
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BuyExtra") || ColsAndValues["BuyExtra"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["BuyExtra"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BuyExtra"))
                            ColsAndValues.Add("BuyExtra", newValue);
                        else
                            ColsAndValues["BuyExtra"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? RefundRate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RefundRate") || ColsAndValues["RefundRate"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["RefundRate"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RefundRate"))
                            ColsAndValues.Add("RefundRate", newValue);
                        else
                            ColsAndValues["RefundRate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? BuyExtraRate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BuyExtraRate") || ColsAndValues["BuyExtraRate"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["BuyExtraRate"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BuyExtraRate"))
                            ColsAndValues.Add("BuyExtraRate", newValue);
                        else
                            ColsAndValues["BuyExtraRate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? RepurchaseRate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RepurchaseRate") || ColsAndValues["RepurchaseRate"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["RepurchaseRate"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RepurchaseRate"))
                            ColsAndValues.Add("RepurchaseRate", newValue);
                        else
                            ColsAndValues["RepurchaseRate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ReissueRate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ReissueRate") || ColsAndValues["ReissueRate"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ReissueRate"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ReissueRate"))
                            ColsAndValues.Add("ReissueRate", newValue);
                        else
                            ColsAndValues["ReissueRate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? MakeHolding
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("MakeHolding") || ColsAndValues["MakeHolding"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["MakeHolding"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("MakeHolding"))
                            ColsAndValues.Add("MakeHolding", newValue);
                        else
                            ColsAndValues["MakeHolding"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? FaxToClient
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("FaxToClient") || ColsAndValues["FaxToClient"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["FaxToClient"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("FaxToClient"))
                            ColsAndValues.Add("FaxToClient", newValue);
                        else
                            ColsAndValues["FaxToClient"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? RepurchaseFees
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RepurchaseFees") || ColsAndValues["RepurchaseFees"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["RepurchaseFees"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RepurchaseFees"))
                            ColsAndValues.Add("RepurchaseFees", newValue);
                        else
                            ColsAndValues["RepurchaseFees"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? RepurchaseFeeType
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RepurchaseFeeType") || ColsAndValues["RepurchaseFeeType"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["RepurchaseFeeType"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RepurchaseFeeType"))
                            ColsAndValues.Add("RepurchaseFeeType", newValue);
                        else
                            ColsAndValues["RepurchaseFeeType"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nchar(20) ", CanBeNull = true)]
                public string CheckReference
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("CheckReference") || ColsAndValues["CheckReference"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["CheckReference"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("CheckReference"))
                            ColsAndValues.Add("CheckReference", newValue);
                        else
                            ColsAndValues["CheckReference"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "bit ", CanBeNull = true)]
                public bool? IsHistoricalRate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("IsHistoricalRate") || ColsAndValues["IsHistoricalRate"] == ValueContainer.Null)
                            return default(bool?);

                        return (bool?)ColsAndValues["IsHistoricalRate"].Value;
                    }
                    set
                    {
                        var newValue = (default(bool?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("IsHistoricalRate"))
                            ColsAndValues.Add("IsHistoricalRate", newValue);
                        else
                            ColsAndValues["IsHistoricalRate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "bit ", CanBeNull = true)]
                public bool? IsReinstateFundsToForward
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("IsReinstateFundsToForward") || ColsAndValues["IsReinstateFundsToForward"] == ValueContainer.Null)
                            return default(bool?);

                        return (bool?)ColsAndValues["IsReinstateFundsToForward"].Value;
                    }
                    set
                    {
                        var newValue = (default(bool?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("IsReinstateFundsToForward"))
                            ColsAndValues.Add("IsReinstateFundsToForward", newValue);
                        else
                            ColsAndValues["IsReinstateFundsToForward"] = newValue;
                    }
                }
            } //end row
        } //end table
    }
}



