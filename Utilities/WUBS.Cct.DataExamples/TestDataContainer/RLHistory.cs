



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `RLHistory`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.;Initial Catalog=work_WUBS2_Trunk_RLHistory;Integrated Security=True`
//     Schema:                 ``
//     Include Views:          `False`


using System;

namespace WUBS.Cct.DataExamples.TestDataContainer
{
    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "RLHistory")]
    public partial class RLHistoryDB : StaticDataDatabase
    {
        public override string Name { get { return "RLHistory"; } }

        public RLHistoryDB() : base()
        {
            Tables.Add("TRRawHeader", new TRRawHeader());
            Tables.Add("trrawdetail", new trrawdetail());
            Tables.Add("TRRawDetailValueDate", new TRRawDetailValueDate());
            Tables.Add("ContributingItemHistory", new ContributingItemHistory());

            InsertStaticData();
        }

        public System.Data.Linq.Table<TRRawHeader.TRRawHeaderRow> TRRawHeaderTable
        {
            get
            {
                return this.GetTable<TRRawHeader.TRRawHeaderRow>();
            }
        }
        public System.Data.Linq.Table<trrawdetail.trrawdetailRow> trrawdetailTable
        {
            get
            {
                return this.GetTable<trrawdetail.trrawdetailRow>();
            }
        }
        public System.Data.Linq.Table<TRRawDetailValueDate.TRRawDetailValueDateRow> TRRawDetailValueDateTable
        {
            get
            {
                return this.GetTable<TRRawDetailValueDate.TRRawDetailValueDateRow>();
            }
        }
        public System.Data.Linq.Table<ContributingItemHistory.ContributingItemHistoryRow> ContributingItemHistoryTable
        {
            get
            {
                return this.GetTable<ContributingItemHistory.ContributingItemHistoryRow>();
            }
        }

        public partial class TRRawHeader : StaticDataTable
        {
            public override string Name { get { return "TRRawHeader"; } }
            public override Type RowType { get { return typeof(TRRawHeaderRow); } }

            public TRRawHeader() : base()
            {
            }

            [global::System.Data.Linq.Mapping.TableAttribute(Name = "TRRawHeader")]
            public partial class TRRawHeaderRow : StaticDataRow
            {

                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "bigint NOT NULL", CanBeNull = false)]
                public long TRRHeader_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("TRRHeader_ID") || ColsAndValues["TRRHeader_ID"] == ValueContainer.Null)
                            return default(long);

                        return (long)ColsAndValues["TRRHeader_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(long) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("TRRHeader_ID"))
                            ColsAndValues.Add("TRRHeader_ID", newValue);
                        else
                            ColsAndValues["TRRHeader_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true, IsPrimaryKey = true)]
                public int? ClientOrder_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ClientOrder_ID") || ColsAndValues["ClientOrder_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ClientOrder_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ClientOrder_ID"))
                            ColsAndValues.Add("ClientOrder_ID", newValue);
                        else
                            ColsAndValues["ClientOrder_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? RelatedClientOrder_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RelatedClientOrder_ID") || ColsAndValues["RelatedClientOrder_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["RelatedClientOrder_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RelatedClientOrder_ID"))
                            ColsAndValues.Add("RelatedClientOrder_ID", newValue);
                        else
                            ColsAndValues["RelatedClientOrder_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(17) ", CanBeNull = true)]
                public string ConfirmationNo
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ConfirmationNo") || ColsAndValues["ConfirmationNo"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["ConfirmationNo"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ConfirmationNo"))
                            ColsAndValues.Add("ConfirmationNo", newValue);
                        else
                            ColsAndValues["ConfirmationNo"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Client_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Client_ID") || ColsAndValues["Client_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Client_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Client_ID"))
                            ColsAndValues.Add("Client_ID", newValue);
                        else
                            ColsAndValues["Client_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(16) ", CanBeNull = true)]
                public string Account
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Account") || ColsAndValues["Account"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["Account"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Account"))
                            ColsAndValues.Add("Account", newValue);
                        else
                            ColsAndValues["Account"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(52) ", CanBeNull = true)]
                public string AcctName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("AcctName") || ColsAndValues["AcctName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["AcctName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("AcctName"))
                            ColsAndValues.Add("AcctName", newValue);
                        else
                            ColsAndValues["AcctName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? RueschStaff_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RueschStaff_ID") || ColsAndValues["RueschStaff_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["RueschStaff_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RueschStaff_ID"))
                            ColsAndValues.Add("RueschStaff_ID", newValue);
                        else
                            ColsAndValues["RueschStaff_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(90) ", CanBeNull = true)]
                public string RueschStaffName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RueschStaffName") || ColsAndValues["RueschStaffName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["RueschStaffName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RueschStaffName"))
                            ColsAndValues.Add("RueschStaffName", newValue);
                        else
                            ColsAndValues["RueschStaffName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Application_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Application_ID") || ColsAndValues["Application_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Application_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Application_ID"))
                            ColsAndValues.Add("Application_ID", newValue);
                        else
                            ColsAndValues["Application_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(100) ", CanBeNull = true)]
                public string ApplicationDescription
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ApplicationDescription") || ColsAndValues["ApplicationDescription"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["ApplicationDescription"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ApplicationDescription"))
                            ColsAndValues.Add("ApplicationDescription", newValue);
                        else
                            ColsAndValues["ApplicationDescription"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? User_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("User_ID") || ColsAndValues["User_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["User_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("User_ID"))
                            ColsAndValues.Add("User_ID", newValue);
                        else
                            ColsAndValues["User_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(60) ", CanBeNull = true)]
                public string UserName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("UserName") || ColsAndValues["UserName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["UserName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("UserName"))
                            ColsAndValues.Add("UserName", newValue);
                        else
                            ColsAndValues["UserName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? OrderType_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OrderType_ID") || ColsAndValues["OrderType_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["OrderType_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OrderType_ID"))
                            ColsAndValues.Add("OrderType_ID", newValue);
                        else
                            ColsAndValues["OrderType_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(100) ", CanBeNull = true)]
                public string OrderTypeDescription
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OrderTypeDescription") || ColsAndValues["OrderTypeDescription"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["OrderTypeDescription"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OrderTypeDescription"))
                            ColsAndValues.Add("OrderTypeDescription", newValue);
                        else
                            ColsAndValues["OrderTypeDescription"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? Ordered
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Ordered") || ColsAndValues["Ordered"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["Ordered"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Ordered"))
                            ColsAndValues.Add("Ordered", newValue);
                        else
                            ColsAndValues["Ordered"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Quote_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Quote_ID") || ColsAndValues["Quote_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Quote_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Quote_ID"))
                            ColsAndValues.Add("Quote_ID", newValue);
                        else
                            ColsAndValues["Quote_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? Spread
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Spread") || ColsAndValues["Spread"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["Spread"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Spread"))
                            ColsAndValues.Add("Spread", newValue);
                        else
                            ColsAndValues["Spread"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Delivery_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Delivery_ID") || ColsAndValues["Delivery_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Delivery_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Delivery_ID"))
                            ColsAndValues.Add("Delivery_ID", newValue);
                        else
                            ColsAndValues["Delivery_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(30) ", CanBeNull = true)]
                public string DeliveryCode
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryCode") || ColsAndValues["DeliveryCode"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryCode"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryCode"))
                            ColsAndValues.Add("DeliveryCode", newValue);
                        else
                            ColsAndValues["DeliveryCode"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(100) ", CanBeNull = true)]
                public string DeliveryDescription
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryDescription") || ColsAndValues["DeliveryDescription"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryDescription"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryDescription"))
                            ColsAndValues.Add("DeliveryDescription", newValue);
                        else
                            ColsAndValues["DeliveryDescription"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(53) ", CanBeNull = true)]
                public string DeliveryCarrier
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryCarrier") || ColsAndValues["DeliveryCarrier"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryCarrier"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryCarrier"))
                            ColsAndValues.Add("DeliveryCarrier", newValue);
                        else
                            ColsAndValues["DeliveryCarrier"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(30) ", CanBeNull = true)]
                public string DeliveryCarrierAccount
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryCarrierAccount") || ColsAndValues["DeliveryCarrierAccount"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryCarrierAccount"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryCarrierAccount"))
                            ColsAndValues.Add("DeliveryCarrierAccount", newValue);
                        else
                            ColsAndValues["DeliveryCarrierAccount"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? DeliveryCarrier_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryCarrier_ID") || ColsAndValues["DeliveryCarrier_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["DeliveryCarrier_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryCarrier_ID"))
                            ColsAndValues.Add("DeliveryCarrier_ID", newValue);
                        else
                            ColsAndValues["DeliveryCarrier_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(52) ", CanBeNull = true)]
                public string DeliveryAddress1
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryAddress1") || ColsAndValues["DeliveryAddress1"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryAddress1"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryAddress1"))
                            ColsAndValues.Add("DeliveryAddress1", newValue);
                        else
                            ColsAndValues["DeliveryAddress1"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(52) ", CanBeNull = true)]
                public string DeliveryAddress2
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryAddress2") || ColsAndValues["DeliveryAddress2"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryAddress2"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryAddress2"))
                            ColsAndValues.Add("DeliveryAddress2", newValue);
                        else
                            ColsAndValues["DeliveryAddress2"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(52) ", CanBeNull = true)]
                public string DeliveryAddress3
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryAddress3") || ColsAndValues["DeliveryAddress3"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryAddress3"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryAddress3"))
                            ColsAndValues.Add("DeliveryAddress3", newValue);
                        else
                            ColsAndValues["DeliveryAddress3"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(20) ", CanBeNull = true)]
                public string DeliveryPC_Prefix
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryPC_Prefix") || ColsAndValues["DeliveryPC_Prefix"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryPC_Prefix"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryPC_Prefix"))
                            ColsAndValues.Add("DeliveryPC_Prefix", newValue);
                        else
                            ColsAndValues["DeliveryPC_Prefix"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(36) ", CanBeNull = true)]
                public string DeliveryCity
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryCity") || ColsAndValues["DeliveryCity"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryCity"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryCity"))
                            ColsAndValues.Add("DeliveryCity", newValue);
                        else
                            ColsAndValues["DeliveryCity"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nchar(2) ", CanBeNull = true)]
                public string DeliveryState
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryState") || ColsAndValues["DeliveryState"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryState"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryState"))
                            ColsAndValues.Add("DeliveryState", newValue);
                        else
                            ColsAndValues["DeliveryState"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(30) ", CanBeNull = true)]
                public string DeliveryProvince
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryProvince") || ColsAndValues["DeliveryProvince"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryProvince"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryProvince"))
                            ColsAndValues.Add("DeliveryProvince", newValue);
                        else
                            ColsAndValues["DeliveryProvince"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(20) ", CanBeNull = true)]
                public string DeliveryPC_Suffix
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryPC_Suffix") || ColsAndValues["DeliveryPC_Suffix"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryPC_Suffix"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryPC_Suffix"))
                            ColsAndValues.Add("DeliveryPC_Suffix", newValue);
                        else
                            ColsAndValues["DeliveryPC_Suffix"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nchar(1) ", CanBeNull = true)]
                public string DeliveryPC_Pos
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryPC_Pos") || ColsAndValues["DeliveryPC_Pos"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryPC_Pos"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryPC_Pos"))
                            ColsAndValues.Add("DeliveryPC_Pos", newValue);
                        else
                            ColsAndValues["DeliveryPC_Pos"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(20) ", CanBeNull = true)]
                public string DeliveryPostalCode
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryPostalCode") || ColsAndValues["DeliveryPostalCode"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryPostalCode"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryPostalCode"))
                            ColsAndValues.Add("DeliveryPostalCode", newValue);
                        else
                            ColsAndValues["DeliveryPostalCode"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nchar(5) ", CanBeNull = true)]
                public string DeliveryZipCode
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryZipCode") || ColsAndValues["DeliveryZipCode"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryZipCode"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryZipCode"))
                            ColsAndValues.Add("DeliveryZipCode", newValue);
                        else
                            ColsAndValues["DeliveryZipCode"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nchar(4) ", CanBeNull = true)]
                public string DeliveryZip4
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryZip4") || ColsAndValues["DeliveryZip4"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryZip4"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryZip4"))
                            ColsAndValues.Add("DeliveryZip4", newValue);
                        else
                            ColsAndValues["DeliveryZip4"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(30) ", CanBeNull = true)]
                public string DeliveryCountry
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeliveryCountry") || ColsAndValues["DeliveryCountry"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DeliveryCountry"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeliveryCountry"))
                            ColsAndValues.Add("DeliveryCountry", newValue);
                        else
                            ColsAndValues["DeliveryCountry"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? PickupOffice_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("PickupOffice_ID") || ColsAndValues["PickupOffice_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["PickupOffice_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("PickupOffice_ID"))
                            ColsAndValues.Add("PickupOffice_ID", newValue);
                        else
                            ColsAndValues["PickupOffice_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(50) ", CanBeNull = true)]
                public string PickupOfficeDescription
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("PickupOfficeDescription") || ColsAndValues["PickupOfficeDescription"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["PickupOfficeDescription"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("PickupOfficeDescription"))
                            ColsAndValues.Add("PickupOfficeDescription", newValue);
                        else
                            ColsAndValues["PickupOfficeDescription"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? PickupDate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("PickupDate") || ColsAndValues["PickupDate"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["PickupDate"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("PickupDate"))
                            ColsAndValues.Add("PickupDate", newValue);
                        else
                            ColsAndValues["PickupDate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255) ", CanBeNull = true)]
                public string ClientMemo
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ClientMemo") || ColsAndValues["ClientMemo"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["ClientMemo"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ClientMemo"))
                            ColsAndValues.Add("ClientMemo", newValue);
                        else
                            ColsAndValues["ClientMemo"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255) ", CanBeNull = true)]
                public string RueschMemo
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RueschMemo") || ColsAndValues["RueschMemo"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["RueschMemo"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RueschMemo"))
                            ColsAndValues.Add("RueschMemo", newValue);
                        else
                            ColsAndValues["RueschMemo"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Documentation
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Documentation") || ColsAndValues["Documentation"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Documentation"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Documentation"))
                            ColsAndValues.Add("Documentation", newValue);
                        else
                            ColsAndValues["Documentation"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? SettlementCurrency_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("SettlementCurrency_ID") || ColsAndValues["SettlementCurrency_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["SettlementCurrency_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("SettlementCurrency_ID"))
                            ColsAndValues.Add("SettlementCurrency_ID", newValue);
                        else
                            ColsAndValues["SettlementCurrency_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(17) ", CanBeNull = true)]
                public string Settlement_SWIFT
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Settlement_SWIFT") || ColsAndValues["Settlement_SWIFT"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["Settlement_SWIFT"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Settlement_SWIFT"))
                            ColsAndValues.Add("Settlement_SWIFT", newValue);
                        else
                            ColsAndValues["Settlement_SWIFT"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? SettlementRate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("SettlementRate") || ColsAndValues["SettlementRate"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["SettlementRate"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("SettlementRate"))
                            ColsAndValues.Add("SettlementRate", newValue);
                        else
                            ColsAndValues["SettlementRate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? SettlementRateIsPer
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("SettlementRateIsPer") || ColsAndValues["SettlementRateIsPer"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["SettlementRateIsPer"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("SettlementRateIsPer"))
                            ColsAndValues.Add("SettlementRateIsPer", newValue);
                        else
                            ColsAndValues["SettlementRateIsPer"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? SettlementRate_NDec
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("SettlementRate_NDec") || ColsAndValues["SettlementRate_NDec"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["SettlementRate_NDec"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("SettlementRate_NDec"))
                            ColsAndValues.Add("SettlementRate_NDec", newValue);
                        else
                            ColsAndValues["SettlementRate_NDec"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? SettlementRate_Multiplier
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("SettlementRate_Multiplier") || ColsAndValues["SettlementRate_Multiplier"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["SettlementRate_Multiplier"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("SettlementRate_Multiplier"))
                            ColsAndValues.Add("SettlementRate_Multiplier", newValue);
                        else
                            ColsAndValues["SettlementRate_Multiplier"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? SettlementAmt_NDec
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("SettlementAmt_NDec") || ColsAndValues["SettlementAmt_NDec"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["SettlementAmt_NDec"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("SettlementAmt_NDec"))
                            ColsAndValues.Add("SettlementAmt_NDec", newValue);
                        else
                            ColsAndValues["SettlementAmt_NDec"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ReportingCurrency_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ReportingCurrency_ID") || ColsAndValues["ReportingCurrency_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ReportingCurrency_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ReportingCurrency_ID"))
                            ColsAndValues.Add("ReportingCurrency_ID", newValue);
                        else
                            ColsAndValues["ReportingCurrency_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(17) ", CanBeNull = true)]
                public string Reporting_SWIFT
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Reporting_SWIFT") || ColsAndValues["Reporting_SWIFT"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["Reporting_SWIFT"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Reporting_SWIFT"))
                            ColsAndValues.Add("Reporting_SWIFT", newValue);
                        else
                            ColsAndValues["Reporting_SWIFT"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? Reporting_Rate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Reporting_Rate") || ColsAndValues["Reporting_Rate"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["Reporting_Rate"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Reporting_Rate"))
                            ColsAndValues.Add("Reporting_Rate", newValue);
                        else
                            ColsAndValues["Reporting_Rate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Reporting_Rate_NDec
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Reporting_Rate_NDec") || ColsAndValues["Reporting_Rate_NDec"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Reporting_Rate_NDec"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Reporting_Rate_NDec"))
                            ColsAndValues.Add("Reporting_Rate_NDec", newValue);
                        else
                            ColsAndValues["Reporting_Rate_NDec"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Reporting_Rate_IsPer
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Reporting_Rate_IsPer") || ColsAndValues["Reporting_Rate_IsPer"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Reporting_Rate_IsPer"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Reporting_Rate_IsPer"))
                            ColsAndValues.Add("Reporting_Rate_IsPer", newValue);
                        else
                            ColsAndValues["Reporting_Rate_IsPer"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Reporting_Rate_Multiplier
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Reporting_Rate_Multiplier") || ColsAndValues["Reporting_Rate_Multiplier"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Reporting_Rate_Multiplier"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Reporting_Rate_Multiplier"))
                            ColsAndValues.Add("Reporting_Rate_Multiplier", newValue);
                        else
                            ColsAndValues["Reporting_Rate_Multiplier"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Reporting_Amt_NDec
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Reporting_Amt_NDec") || ColsAndValues["Reporting_Amt_NDec"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Reporting_Amt_NDec"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Reporting_Amt_NDec"))
                            ColsAndValues.Add("Reporting_Amt_NDec", newValue);
                        else
                            ColsAndValues["Reporting_Amt_NDec"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? PaymentMethod_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("PaymentMethod_ID") || ColsAndValues["PaymentMethod_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["PaymentMethod_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("PaymentMethod_ID"))
                            ColsAndValues.Add("PaymentMethod_ID", newValue);
                        else
                            ColsAndValues["PaymentMethod_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255) ", CanBeNull = true)]
                public string PaymentMethodDescription
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("PaymentMethodDescription") || ColsAndValues["PaymentMethodDescription"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["PaymentMethodDescription"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("PaymentMethodDescription"))
                            ColsAndValues.Add("PaymentMethodDescription", newValue);
                        else
                            ColsAndValues["PaymentMethodDescription"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? DebitAccount_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitAccount_ID") || ColsAndValues["DebitAccount_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["DebitAccount_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitAccount_ID"))
                            ColsAndValues.Add("DebitAccount_ID", newValue);
                        else
                            ColsAndValues["DebitAccount_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? DebitAccountUser_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitAccountUser_ID") || ColsAndValues["DebitAccountUser_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["DebitAccountUser_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitAccountUser_ID"))
                            ColsAndValues.Add("DebitAccountUser_ID", newValue);
                        else
                            ColsAndValues["DebitAccountUser_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(90) ", CanBeNull = true)]
                public string DebitAccountUserName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitAccountUserName") || ColsAndValues["DebitAccountUserName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DebitAccountUserName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitAccountUserName"))
                            ColsAndValues.Add("DebitAccountUserName", newValue);
                        else
                            ColsAndValues["DebitAccountUserName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? DebitClearingSystem_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitClearingSystem_ID") || ColsAndValues["DebitClearingSystem_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["DebitClearingSystem_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitClearingSystem_ID"))
                            ColsAndValues.Add("DebitClearingSystem_ID", newValue);
                        else
                            ColsAndValues["DebitClearingSystem_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(50) ", CanBeNull = true)]
                public string DebitClearingSystemDescription
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitClearingSystemDescription") || ColsAndValues["DebitClearingSystemDescription"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DebitClearingSystemDescription"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitClearingSystemDescription"))
                            ColsAndValues.Add("DebitClearingSystemDescription", newValue);
                        else
                            ColsAndValues["DebitClearingSystemDescription"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(35) ", CanBeNull = true)]
                public string DebitClearing_Ident
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitClearing_Ident") || ColsAndValues["DebitClearing_Ident"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DebitClearing_Ident"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitClearing_Ident"))
                            ColsAndValues.Add("DebitClearing_Ident", newValue);
                        else
                            ColsAndValues["DebitClearing_Ident"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(35) ", CanBeNull = true)]
                public string DebitAccountNumber
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitAccountNumber") || ColsAndValues["DebitAccountNumber"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DebitAccountNumber"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitAccountNumber"))
                            ColsAndValues.Add("DebitAccountNumber", newValue);
                        else
                            ColsAndValues["DebitAccountNumber"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? DebitAccountType
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitAccountType") || ColsAndValues["DebitAccountType"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["DebitAccountType"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitAccountType"))
                            ColsAndValues.Add("DebitAccountType", newValue);
                        else
                            ColsAndValues["DebitAccountType"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? DebitUpperLimit
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitUpperLimit") || ColsAndValues["DebitUpperLimit"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["DebitUpperLimit"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitUpperLimit"))
                            ColsAndValues.Add("DebitUpperLimit", newValue);
                        else
                            ColsAndValues["DebitUpperLimit"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(16) ", CanBeNull = true)]
                public string DebitRefNo
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitRefNo") || ColsAndValues["DebitRefNo"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DebitRefNo"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitRefNo"))
                            ColsAndValues.Add("DebitRefNo", newValue);
                        else
                            ColsAndValues["DebitRefNo"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(35) ", CanBeNull = true)]
                public string DebitBankName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitBankName") || ColsAndValues["DebitBankName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DebitBankName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitBankName"))
                            ColsAndValues.Add("DebitBankName", newValue);
                        else
                            ColsAndValues["DebitBankName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(50) ", CanBeNull = true)]
                public string DebitBankAddr1
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitBankAddr1") || ColsAndValues["DebitBankAddr1"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DebitBankAddr1"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitBankAddr1"))
                            ColsAndValues.Add("DebitBankAddr1", newValue);
                        else
                            ColsAndValues["DebitBankAddr1"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(50) ", CanBeNull = true)]
                public string DebitBankAddr2
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitBankAddr2") || ColsAndValues["DebitBankAddr2"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DebitBankAddr2"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitBankAddr2"))
                            ColsAndValues.Add("DebitBankAddr2", newValue);
                        else
                            ColsAndValues["DebitBankAddr2"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(15) ", CanBeNull = true)]
                public string DebitBankPostalCode
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitBankPostalCode") || ColsAndValues["DebitBankPostalCode"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DebitBankPostalCode"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitBankPostalCode"))
                            ColsAndValues.Add("DebitBankPostalCode", newValue);
                        else
                            ColsAndValues["DebitBankPostalCode"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(6) ", CanBeNull = true)]
                public string DebitOriginator_Ident
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitOriginator_Ident") || ColsAndValues["DebitOriginator_Ident"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["DebitOriginator_Ident"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitOriginator_Ident"))
                            ColsAndValues.Add("DebitOriginator_Ident", newValue);
                        else
                            ColsAndValues["DebitOriginator_Ident"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? DebitInitDate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DebitInitDate") || ColsAndValues["DebitInitDate"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["DebitInitDate"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DebitInitDate"))
                            ColsAndValues.Add("DebitInitDate", newValue);
                        else
                            ColsAndValues["DebitInitDate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? NumberItems
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("NumberItems") || ColsAndValues["NumberItems"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["NumberItems"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("NumberItems"))
                            ColsAndValues.Add("NumberItems", newValue);
                        else
                            ColsAndValues["NumberItems"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ItemTotal
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemTotal") || ColsAndValues["ItemTotal"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ItemTotal"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemTotal"))
                            ColsAndValues.Add("ItemTotal", newValue);
                        else
                            ColsAndValues["ItemTotal"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ServiceChargesTotal
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ServiceChargesTotal") || ColsAndValues["ServiceChargesTotal"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ServiceChargesTotal"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ServiceChargesTotal"))
                            ColsAndValues.Add("ServiceChargesTotal", newValue);
                        else
                            ColsAndValues["ServiceChargesTotal"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? Subtotal
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Subtotal") || ColsAndValues["Subtotal"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["Subtotal"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Subtotal"))
                            ColsAndValues.Add("Subtotal", newValue);
                        else
                            ColsAndValues["Subtotal"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ShippingFees
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ShippingFees") || ColsAndValues["ShippingFees"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ShippingFees"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ShippingFees"))
                            ColsAndValues.Add("ShippingFees", newValue);
                        else
                            ColsAndValues["ShippingFees"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? GrandTotal
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("GrandTotal") || ColsAndValues["GrandTotal"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["GrandTotal"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("GrandTotal"))
                            ColsAndValues.Add("GrandTotal", newValue);
                        else
                            ColsAndValues["GrandTotal"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ItemTotal_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemTotal_Reporting") || ColsAndValues["ItemTotal_Reporting"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ItemTotal_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemTotal_Reporting"))
                            ColsAndValues.Add("ItemTotal_Reporting", newValue);
                        else
                            ColsAndValues["ItemTotal_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ServiceChargesTotal_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ServiceChargesTotal_Reporting") || ColsAndValues["ServiceChargesTotal_Reporting"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ServiceChargesTotal_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ServiceChargesTotal_Reporting"))
                            ColsAndValues.Add("ServiceChargesTotal_Reporting", newValue);
                        else
                            ColsAndValues["ServiceChargesTotal_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? Subtotal_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Subtotal_Reporting") || ColsAndValues["Subtotal_Reporting"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["Subtotal_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Subtotal_Reporting"))
                            ColsAndValues.Add("Subtotal_Reporting", newValue);
                        else
                            ColsAndValues["Subtotal_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ShippingFees_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ShippingFees_Reporting") || ColsAndValues["ShippingFees_Reporting"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ShippingFees_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ShippingFees_Reporting"))
                            ColsAndValues.Add("ShippingFees_Reporting", newValue);
                        else
                            ColsAndValues["ShippingFees_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? GrandTotal_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("GrandTotal_Reporting") || ColsAndValues["GrandTotal_Reporting"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["GrandTotal_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("GrandTotal_Reporting"))
                            ColsAndValues.Add("GrandTotal_Reporting", newValue);
                        else
                            ColsAndValues["GrandTotal_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ItemTotal_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemTotal_USD") || ColsAndValues["ItemTotal_USD"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ItemTotal_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemTotal_USD"))
                            ColsAndValues.Add("ItemTotal_USD", newValue);
                        else
                            ColsAndValues["ItemTotal_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ServiceChargesTotal_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ServiceChargesTotal_USD") || ColsAndValues["ServiceChargesTotal_USD"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ServiceChargesTotal_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ServiceChargesTotal_USD"))
                            ColsAndValues.Add("ServiceChargesTotal_USD", newValue);
                        else
                            ColsAndValues["ServiceChargesTotal_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? Subtotal_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Subtotal_USD") || ColsAndValues["Subtotal_USD"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["Subtotal_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Subtotal_USD"))
                            ColsAndValues.Add("Subtotal_USD", newValue);
                        else
                            ColsAndValues["Subtotal_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ShippingFees_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ShippingFees_USD") || ColsAndValues["ShippingFees_USD"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ShippingFees_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ShippingFees_USD"))
                            ColsAndValues.Add("ShippingFees_USD", newValue);
                        else
                            ColsAndValues["ShippingFees_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? GrandTotal_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("GrandTotal_USD") || ColsAndValues["GrandTotal_USD"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["GrandTotal_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("GrandTotal_USD"))
                            ColsAndValues.Add("GrandTotal_USD", newValue);
                        else
                            ColsAndValues["GrandTotal_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? DepositPercent
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DepositPercent") || ColsAndValues["DepositPercent"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["DepositPercent"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DepositPercent"))
                            ColsAndValues.Add("DepositPercent", newValue);
                        else
                            ColsAndValues["DepositPercent"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? InterestRate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("InterestRate") || ColsAndValues["InterestRate"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["InterestRate"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("InterestRate"))
                            ColsAndValues.Add("InterestRate", newValue);
                        else
                            ColsAndValues["InterestRate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? DepositTotal
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DepositTotal") || ColsAndValues["DepositTotal"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["DepositTotal"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DepositTotal"))
                            ColsAndValues.Add("DepositTotal", newValue);
                        else
                            ColsAndValues["DepositTotal"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? DepositTotal_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DepositTotal_Reporting") || ColsAndValues["DepositTotal_Reporting"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["DepositTotal_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DepositTotal_Reporting"))
                            ColsAndValues.Add("DepositTotal_Reporting", newValue);
                        else
                            ColsAndValues["DepositTotal_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? DepositTotal_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DepositTotal_USD") || ColsAndValues["DepositTotal_USD"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["DepositTotal_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DepositTotal_USD"))
                            ColsAndValues.Add("DepositTotal_USD", newValue);
                        else
                            ColsAndValues["DepositTotal_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? BalanceTotal
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BalanceTotal") || ColsAndValues["BalanceTotal"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["BalanceTotal"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BalanceTotal"))
                            ColsAndValues.Add("BalanceTotal", newValue);
                        else
                            ColsAndValues["BalanceTotal"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? BalanceTotal_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BalanceTotal_Reporting") || ColsAndValues["BalanceTotal_Reporting"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["BalanceTotal_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BalanceTotal_Reporting"))
                            ColsAndValues.Add("BalanceTotal_Reporting", newValue);
                        else
                            ColsAndValues["BalanceTotal_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? BalanceTotal_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BalanceTotal_USD") || ColsAndValues["BalanceTotal_USD"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["BalanceTotal_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BalanceTotal_USD"))
                            ColsAndValues.Add("BalanceTotal_USD", newValue);
                        else
                            ColsAndValues["BalanceTotal_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? NotifyMethod_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("NotifyMethod_ID") || ColsAndValues["NotifyMethod_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["NotifyMethod_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("NotifyMethod_ID"))
                            ColsAndValues.Add("NotifyMethod_ID", newValue);
                        else
                            ColsAndValues["NotifyMethod_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(50) ", CanBeNull = true)]
                public string NotifyMethodDescription
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("NotifyMethodDescription") || ColsAndValues["NotifyMethodDescription"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["NotifyMethodDescription"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("NotifyMethodDescription"))
                            ColsAndValues.Add("NotifyMethodDescription", newValue);
                        else
                            ColsAndValues["NotifyMethodDescription"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255) ", CanBeNull = true)]
                public string PersonNotified
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("PersonNotified") || ColsAndValues["PersonNotified"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["PersonNotified"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("PersonNotified"))
                            ColsAndValues.Add("PersonNotified", newValue);
                        else
                            ColsAndValues["PersonNotified"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(90) ", CanBeNull = true)]
                public string NotifiedAt
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("NotifiedAt") || ColsAndValues["NotifiedAt"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["NotifiedAt"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("NotifiedAt"))
                            ColsAndValues.Add("NotifiedAt", newValue);
                        else
                            ColsAndValues["NotifiedAt"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Status_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Status_ID") || ColsAndValues["Status_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Status_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Status_ID"))
                            ColsAndValues.Add("Status_ID", newValue);
                        else
                            ColsAndValues["Status_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255) ", CanBeNull = true)]
                public string StatusDescription
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("StatusDescription") || ColsAndValues["StatusDescription"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["StatusDescription"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("StatusDescription"))
                            ColsAndValues.Add("StatusDescription", newValue);
                        else
                            ColsAndValues["StatusDescription"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? StatusUpdated
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("StatusUpdated") || ColsAndValues["StatusUpdated"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["StatusUpdated"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("StatusUpdated"))
                            ColsAndValues.Add("StatusUpdated", newValue);
                        else
                            ColsAndValues["StatusUpdated"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? StatusUpdatedBy
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("StatusUpdatedBy") || ColsAndValues["StatusUpdatedBy"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["StatusUpdatedBy"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("StatusUpdatedBy"))
                            ColsAndValues.Add("StatusUpdatedBy", newValue);
                        else
                            ColsAndValues["StatusUpdatedBy"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(90) ", CanBeNull = true)]
                public string StatusUpdatedByName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("StatusUpdatedByName") || ColsAndValues["StatusUpdatedByName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["StatusUpdatedByName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("StatusUpdatedByName"))
                            ColsAndValues.Add("StatusUpdatedByName", newValue);
                        else
                            ColsAndValues["StatusUpdatedByName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? initdt
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("initdt") || ColsAndValues["initdt"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["initdt"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("initdt"))
                            ColsAndValues.Add("initdt", newValue);
                        else
                            ColsAndValues["initdt"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? initid
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("initid") || ColsAndValues["initid"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["initid"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("initid"))
                            ColsAndValues.Add("initid", newValue);
                        else
                            ColsAndValues["initid"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(90) ", CanBeNull = true)]
                public string InitName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("InitName") || ColsAndValues["InitName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["InitName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("InitName"))
                            ColsAndValues.Add("InitName", newValue);
                        else
                            ColsAndValues["InitName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? upddt
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("upddt") || ColsAndValues["upddt"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["upddt"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("upddt"))
                            ColsAndValues.Add("upddt", newValue);
                        else
                            ColsAndValues["upddt"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? updid
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("updid") || ColsAndValues["updid"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["updid"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("updid"))
                            ColsAndValues.Add("updid", newValue);
                        else
                            ColsAndValues["updid"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(90) ", CanBeNull = true)]
                public string UpdName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("UpdName") || ColsAndValues["UpdName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["UpdName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("UpdName"))
                            ColsAndValues.Add("UpdName", newValue);
                        else
                            ColsAndValues["UpdName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? ProcessedDate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ProcessedDate") || ColsAndValues["ProcessedDate"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["ProcessedDate"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ProcessedDate"))
                            ColsAndValues.Add("ProcessedDate", newValue);
                        else
                            ColsAndValues["ProcessedDate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? SettlementRate_NDec_Inv
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("SettlementRate_NDec_Inv") || ColsAndValues["SettlementRate_NDec_Inv"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["SettlementRate_NDec_Inv"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("SettlementRate_NDec_Inv"))
                            ColsAndValues.Add("SettlementRate_NDec_Inv", newValue);
                        else
                            ColsAndValues["SettlementRate_NDec_Inv"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? SettlementRate_Multiplier_Inv
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("SettlementRate_Multiplier_Inv") || ColsAndValues["SettlementRate_Multiplier_Inv"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["SettlementRate_Multiplier_Inv"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("SettlementRate_Multiplier_Inv"))
                            ColsAndValues.Add("SettlementRate_Multiplier_Inv", newValue);
                        else
                            ColsAndValues["SettlementRate_Multiplier_Inv"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? ReportingRate_NDec_Inv
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ReportingRate_NDec_Inv") || ColsAndValues["ReportingRate_NDec_Inv"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["ReportingRate_NDec_Inv"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ReportingRate_NDec_Inv"))
                            ColsAndValues.Add("ReportingRate_NDec_Inv", newValue);
                        else
                            ColsAndValues["ReportingRate_NDec_Inv"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? ReportingRate_Multiplier_Inv
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ReportingRate_Multiplier_Inv") || ColsAndValues["ReportingRate_Multiplier_Inv"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["ReportingRate_Multiplier_Inv"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ReportingRate_Multiplier_Inv"))
                            ColsAndValues.Add("ReportingRate_Multiplier_Inv", newValue);
                        else
                            ColsAndValues["ReportingRate_Multiplier_Inv"] = newValue;
                    }
                }
            } //end row
        } //end table
        public partial class trrawdetail : StaticDataTable
        {
            public override string Name { get { return "trrawdetail"; } }
            public override Type RowType { get { return typeof(trrawdetailRow); } }

            public trrawdetail() : base()
            {
            }

            [global::System.Data.Linq.Mapping.TableAttribute(Name = "trrawdetail")]
            public partial class trrawdetailRow : StaticDataRow
            {

                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "bigint NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
                public long TRRDetail_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("TRRDetail_ID") || ColsAndValues["TRRDetail_ID"] == ValueContainer.Null)
                            return default(long);

                        return (long)ColsAndValues["TRRDetail_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(long) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("TRRDetail_ID"))
                            ColsAndValues.Add("TRRDetail_ID", newValue);
                        else
                            ColsAndValues["TRRDetail_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false)]
                public int TRRHeader_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("TRRHeader_ID") || ColsAndValues["TRRHeader_ID"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["TRRHeader_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("TRRHeader_ID"))
                            ColsAndValues.Add("TRRHeader_ID", newValue);
                        else
                            ColsAndValues["TRRHeader_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true, IsPrimaryKey = true)]
                public int? OrderDetail_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OrderDetail_ID") || ColsAndValues["OrderDetail_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["OrderDetail_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OrderDetail_ID"))
                            ColsAndValues.Add("OrderDetail_ID", newValue);
                        else
                            ColsAndValues["OrderDetail_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ClientOrder_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ClientOrder_ID") || ColsAndValues["ClientOrder_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ClientOrder_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ClientOrder_ID"))
                            ColsAndValues.Add("ClientOrder_ID", newValue);
                        else
                            ColsAndValues["ClientOrder_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? RelatedOrderDetail_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RelatedOrderDetail_ID") || ColsAndValues["RelatedOrderDetail_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["RelatedOrderDetail_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RelatedOrderDetail_ID"))
                            ColsAndValues.Add("RelatedOrderDetail_ID", newValue);
                        else
                            ColsAndValues["RelatedOrderDetail_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(17) ", CanBeNull = true)]
                public string ConfirmationNo
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ConfirmationNo") || ColsAndValues["ConfirmationNo"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["ConfirmationNo"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ConfirmationNo"))
                            ColsAndValues.Add("ConfirmationNo", newValue);
                        else
                            ColsAndValues["ConfirmationNo"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? ItemNo
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemNo") || ColsAndValues["ItemNo"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["ItemNo"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemNo"))
                            ColsAndValues.Add("ItemNo", newValue);
                        else
                            ColsAndValues["ItemNo"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ItemType_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemType_ID") || ColsAndValues["ItemType_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ItemType_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemType_ID"))
                            ColsAndValues.Add("ItemType_ID", newValue);
                        else
                            ColsAndValues["ItemType_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(100) ", CanBeNull = true)]
                public string ItemTypeDescription
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemTypeDescription") || ColsAndValues["ItemTypeDescription"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["ItemTypeDescription"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemTypeDescription"))
                            ColsAndValues.Add("ItemTypeDescription", newValue);
                        else
                            ColsAndValues["ItemTypeDescription"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Currency_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Currency_ID") || ColsAndValues["Currency_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Currency_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Currency_ID"))
                            ColsAndValues.Add("Currency_ID", newValue);
                        else
                            ColsAndValues["Currency_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(17) ", CanBeNull = true)]
                public string CurrencyCode
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("CurrencyCode") || ColsAndValues["CurrencyCode"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["CurrencyCode"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("CurrencyCode"))
                            ColsAndValues.Add("CurrencyCode", newValue);
                        else
                            ColsAndValues["CurrencyCode"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? FundedBy
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("FundedBy") || ColsAndValues["FundedBy"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["FundedBy"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("FundedBy"))
                            ColsAndValues.Add("FundedBy", newValue);
                        else
                            ColsAndValues["FundedBy"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ForeignAmount
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ForeignAmount") || ColsAndValues["ForeignAmount"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ForeignAmount"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ForeignAmount"))
                            ColsAndValues.Add("ForeignAmount", newValue);
                        else
                            ColsAndValues["ForeignAmount"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ForeignAmountInSC
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ForeignAmountInSC") || ColsAndValues["ForeignAmountInSC"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ForeignAmountInSC"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ForeignAmountInSC"))
                            ColsAndValues.Add("ForeignAmountInSC", newValue);
                        else
                            ColsAndValues["ForeignAmountInSC"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? ForeignAmountIsInSC
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ForeignAmountIsInSC") || ColsAndValues["ForeignAmountIsInSC"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["ForeignAmountIsInSC"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ForeignAmountIsInSC"))
                            ColsAndValues.Add("ForeignAmountIsInSC", newValue);
                        else
                            ColsAndValues["ForeignAmountIsInSC"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ItemRate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemRate") || ColsAndValues["ItemRate"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ItemRate"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemRate"))
                            ColsAndValues.Add("ItemRate", newValue);
                        else
                            ColsAndValues["ItemRate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Quote_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Quote_ID") || ColsAndValues["Quote_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Quote_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Quote_ID"))
                            ColsAndValues.Add("Quote_ID", newValue);
                        else
                            ColsAndValues["Quote_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? Spread
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Spread") || ColsAndValues["Spread"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["Spread"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Spread"))
                            ColsAndValues.Add("Spread", newValue);
                        else
                            ColsAndValues["Spread"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? Extension
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Extension") || ColsAndValues["Extension"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["Extension"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Extension"))
                            ColsAndValues.Add("Extension", newValue);
                        else
                            ColsAndValues["Extension"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Fee_ID_1
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Fee_ID_1") || ColsAndValues["Fee_ID_1"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Fee_ID_1"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Fee_ID_1"))
                            ColsAndValues.Add("Fee_ID_1", newValue);
                        else
                            ColsAndValues["Fee_ID_1"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ServiceCharges
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ServiceCharges") || ColsAndValues["ServiceCharges"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ServiceCharges"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ServiceCharges"))
                            ColsAndValues.Add("ServiceCharges", newValue);
                        else
                            ColsAndValues["ServiceCharges"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Fee_ID_2
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Fee_ID_2") || ColsAndValues["Fee_ID_2"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Fee_ID_2"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Fee_ID_2"))
                            ColsAndValues.Add("Fee_ID_2", newValue);
                        else
                            ColsAndValues["Fee_ID_2"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? OtherFee
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OtherFee") || ColsAndValues["OtherFee"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["OtherFee"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OtherFee"))
                            ColsAndValues.Add("OtherFee", newValue);
                        else
                            ColsAndValues["OtherFee"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? DeductFeesFromFA
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeductFeesFromFA") || ColsAndValues["DeductFeesFromFA"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["DeductFeesFromFA"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeductFeesFromFA"))
                            ColsAndValues.Add("DeductFeesFromFA", newValue);
                        else
                            ColsAndValues["DeductFeesFromFA"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? DeductFeesFromFA_OriginalFA
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DeductFeesFromFA_OriginalFA") || ColsAndValues["DeductFeesFromFA_OriginalFA"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["DeductFeesFromFA_OriginalFA"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DeductFeesFromFA_OriginalFA"))
                            ColsAndValues.Add("DeductFeesFromFA_OriginalFA", newValue);
                        else
                            ColsAndValues["DeductFeesFromFA_OriginalFA"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? Subtotal
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Subtotal") || ColsAndValues["Subtotal"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["Subtotal"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Subtotal"))
                            ColsAndValues.Add("Subtotal", newValue);
                        else
                            ColsAndValues["Subtotal"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? ItemRateIsPer
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemRateIsPer") || ColsAndValues["ItemRateIsPer"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["ItemRateIsPer"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemRateIsPer"))
                            ColsAndValues.Add("ItemRateIsPer", newValue);
                        else
                            ColsAndValues["ItemRateIsPer"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ItemRate_NDec
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemRate_NDec") || ColsAndValues["ItemRate_NDec"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ItemRate_NDec"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemRate_NDec"))
                            ColsAndValues.Add("ItemRate_NDec", newValue);
                        else
                            ColsAndValues["ItemRate_NDec"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? RateMultiplier
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RateMultiplier") || ColsAndValues["RateMultiplier"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["RateMultiplier"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RateMultiplier"))
                            ColsAndValues.Add("RateMultiplier", newValue);
                        else
                            ColsAndValues["RateMultiplier"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ForeignAmt_NDec
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ForeignAmt_NDec") || ColsAndValues["ForeignAmt_NDec"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ForeignAmt_NDec"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ForeignAmt_NDec"))
                            ColsAndValues.Add("ForeignAmt_NDec", newValue);
                        else
                            ColsAndValues["ForeignAmt_NDec"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? Extension_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Extension_Reporting") || ColsAndValues["Extension_Reporting"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["Extension_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Extension_Reporting"))
                            ColsAndValues.Add("Extension_Reporting", newValue);
                        else
                            ColsAndValues["Extension_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ServiceCharges_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ServiceCharges_Reporting") || ColsAndValues["ServiceCharges_Reporting"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ServiceCharges_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ServiceCharges_Reporting"))
                            ColsAndValues.Add("ServiceCharges_Reporting", newValue);
                        else
                            ColsAndValues["ServiceCharges_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? OtherFee_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OtherFee_Reporting") || ColsAndValues["OtherFee_Reporting"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["OtherFee_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OtherFee_Reporting"))
                            ColsAndValues.Add("OtherFee_Reporting", newValue);
                        else
                            ColsAndValues["OtherFee_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? Subtotal_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Subtotal_Reporting") || ColsAndValues["Subtotal_Reporting"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["Subtotal_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Subtotal_Reporting"))
                            ColsAndValues.Add("Subtotal_Reporting", newValue);
                        else
                            ColsAndValues["Subtotal_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? Extension_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Extension_USD") || ColsAndValues["Extension_USD"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["Extension_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Extension_USD"))
                            ColsAndValues.Add("Extension_USD", newValue);
                        else
                            ColsAndValues["Extension_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ServiceCharges_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ServiceCharges_USD") || ColsAndValues["ServiceCharges_USD"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ServiceCharges_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ServiceCharges_USD"))
                            ColsAndValues.Add("ServiceCharges_USD", newValue);
                        else
                            ColsAndValues["ServiceCharges_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? OtherFee_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OtherFee_USD") || ColsAndValues["OtherFee_USD"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["OtherFee_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OtherFee_USD"))
                            ColsAndValues.Add("OtherFee_USD", newValue);
                        else
                            ColsAndValues["OtherFee_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? Subtotal_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Subtotal_USD") || ColsAndValues["Subtotal_USD"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["Subtotal_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Subtotal_USD"))
                            ColsAndValues.Add("Subtotal_USD", newValue);
                        else
                            ColsAndValues["Subtotal_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(50) ", CanBeNull = true)]
                public string ServiceChargePhrase
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ServiceChargePhrase") || ColsAndValues["ServiceChargePhrase"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["ServiceChargePhrase"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ServiceChargePhrase"))
                            ColsAndValues.Add("ServiceChargePhrase", newValue);
                        else
                            ColsAndValues["ServiceChargePhrase"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(50) ", CanBeNull = true)]
                public string OtherFeePhrase
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OtherFeePhrase") || ColsAndValues["OtherFeePhrase"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["OtherFeePhrase"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OtherFeePhrase"))
                            ColsAndValues.Add("OtherFeePhrase", newValue);
                        else
                            ColsAndValues["OtherFeePhrase"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(22) ", CanBeNull = true)]
                public string OurCheckRef
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OurCheckRef") || ColsAndValues["OurCheckRef"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["OurCheckRef"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OurCheckRef"))
                            ColsAndValues.Add("OurCheckRef", newValue);
                        else
                            ColsAndValues["OurCheckRef"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? DateOnCheck
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DateOnCheck") || ColsAndValues["DateOnCheck"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["DateOnCheck"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DateOnCheck"))
                            ColsAndValues.Add("DateOnCheck", newValue);
                        else
                            ColsAndValues["DateOnCheck"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(128) ", CanBeNull = true)]
                public string ClientRef1
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ClientRef1") || ColsAndValues["ClientRef1"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["ClientRef1"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ClientRef1"))
                            ColsAndValues.Add("ClientRef1", newValue);
                        else
                            ColsAndValues["ClientRef1"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(127) ", CanBeNull = true)]
                public string ClientRef2
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ClientRef2") || ColsAndValues["ClientRef2"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["ClientRef2"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ClientRef2"))
                            ColsAndValues.Add("ClientRef2", newValue);
                        else
                            ColsAndValues["ClientRef2"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(53) ", CanBeNull = true)]
                public string ByOrderOf
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ByOrderOf") || ColsAndValues["ByOrderOf"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["ByOrderOf"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ByOrderOf"))
                            ColsAndValues.Add("ByOrderOf", newValue);
                        else
                            ColsAndValues["ByOrderOf"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Beneficiary_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Beneficiary_ID") || ColsAndValues["Beneficiary_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Beneficiary_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Beneficiary_ID"))
                            ColsAndValues.Add("Beneficiary_ID", newValue);
                        else
                            ColsAndValues["Beneficiary_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(30) ", CanBeNull = true)]
                public string BeneShortName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneShortName") || ColsAndValues["BeneShortName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneShortName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneShortName"))
                            ColsAndValues.Add("BeneShortName", newValue);
                        else
                            ColsAndValues["BeneShortName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(140) ", CanBeNull = true)]
                public string BeneName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneName") || ColsAndValues["BeneName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneName"))
                            ColsAndValues.Add("BeneName", newValue);
                        else
                            ColsAndValues["BeneName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(34) ", CanBeNull = true)]
                public string BeneAccount
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneAccount") || ColsAndValues["BeneAccount"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneAccount"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneAccount"))
                            ColsAndValues.Add("BeneAccount", newValue);
                        else
                            ColsAndValues["BeneAccount"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(140) ", CanBeNull = true)]
                public string BeneAddressLine1
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneAddressLine1") || ColsAndValues["BeneAddressLine1"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneAddressLine1"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneAddressLine1"))
                            ColsAndValues.Add("BeneAddressLine1", newValue);
                        else
                            ColsAndValues["BeneAddressLine1"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(35) ", CanBeNull = true)]
                public string BeneAddressLine2
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneAddressLine2") || ColsAndValues["BeneAddressLine2"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneAddressLine2"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneAddressLine2"))
                            ColsAndValues.Add("BeneAddressLine2", newValue);
                        else
                            ColsAndValues["BeneAddressLine2"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(35) ", CanBeNull = true)]
                public string BeneAddressLine3
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneAddressLine3") || ColsAndValues["BeneAddressLine3"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneAddressLine3"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneAddressLine3"))
                            ColsAndValues.Add("BeneAddressLine3", newValue);
                        else
                            ColsAndValues["BeneAddressLine3"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? BeneCountry_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneCountry_ID") || ColsAndValues["BeneCountry_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["BeneCountry_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneCountry_ID"))
                            ColsAndValues.Add("BeneCountry_ID", newValue);
                        else
                            ColsAndValues["BeneCountry_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(2) ", CanBeNull = true)]
                public string BeneCountryAlpha2
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneCountryAlpha2") || ColsAndValues["BeneCountryAlpha2"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneCountryAlpha2"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneCountryAlpha2"))
                            ColsAndValues.Add("BeneCountryAlpha2", newValue);
                        else
                            ColsAndValues["BeneCountryAlpha2"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(34) ", CanBeNull = true)]
                public string BeneBankAccount
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneBankAccount") || ColsAndValues["BeneBankAccount"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneBankAccount"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneBankAccount"))
                            ColsAndValues.Add("BeneBankAccount", newValue);
                        else
                            ColsAndValues["BeneBankAccount"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(128) ", CanBeNull = true)]
                public string BeneRefLine1
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneRefLine1") || ColsAndValues["BeneRefLine1"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneRefLine1"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneRefLine1"))
                            ColsAndValues.Add("BeneRefLine1", newValue);
                        else
                            ColsAndValues["BeneRefLine1"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(127) ", CanBeNull = true)]
                public string BeneRefLine2
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneRefLine2") || ColsAndValues["BeneRefLine2"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneRefLine2"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneRefLine2"))
                            ColsAndValues.Add("BeneRefLine2", newValue);
                        else
                            ColsAndValues["BeneRefLine2"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(126) ", CanBeNull = true)]
                public string BeneBankCode
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneBankCode") || ColsAndValues["BeneBankCode"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneBankCode"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneBankCode"))
                            ColsAndValues.Add("BeneBankCode", newValue);
                        else
                            ColsAndValues["BeneBankCode"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(70) ", CanBeNull = true)]
                public string BeneBankDescription
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneBankDescription") || ColsAndValues["BeneBankDescription"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneBankDescription"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneBankDescription"))
                            ColsAndValues.Add("BeneBankDescription", newValue);
                        else
                            ColsAndValues["BeneBankDescription"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(11) ", CanBeNull = true)]
                public string BeneBankSWIFT_Address
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneBankSWIFT_Address") || ColsAndValues["BeneBankSWIFT_Address"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneBankSWIFT_Address"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneBankSWIFT_Address"))
                            ColsAndValues.Add("BeneBankSWIFT_Address", newValue);
                        else
                            ColsAndValues["BeneBankSWIFT_Address"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(29) ", CanBeNull = true)]
                public string BeneBankRoutingCode
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneBankRoutingCode") || ColsAndValues["BeneBankRoutingCode"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneBankRoutingCode"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneBankRoutingCode"))
                            ColsAndValues.Add("BeneBankRoutingCode", newValue);
                        else
                            ColsAndValues["BeneBankRoutingCode"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(140) ", CanBeNull = true)]
                public string BeneBankAddressLine1
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneBankAddressLine1") || ColsAndValues["BeneBankAddressLine1"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneBankAddressLine1"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneBankAddressLine1"))
                            ColsAndValues.Add("BeneBankAddressLine1", newValue);
                        else
                            ColsAndValues["BeneBankAddressLine1"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(35) ", CanBeNull = true)]
                public string BeneBankAddressLine2
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneBankAddressLine2") || ColsAndValues["BeneBankAddressLine2"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneBankAddressLine2"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneBankAddressLine2"))
                            ColsAndValues.Add("BeneBankAddressLine2", newValue);
                        else
                            ColsAndValues["BeneBankAddressLine2"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(35) ", CanBeNull = true)]
                public string BeneBankAddressLine3
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneBankAddressLine3") || ColsAndValues["BeneBankAddressLine3"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneBankAddressLine3"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneBankAddressLine3"))
                            ColsAndValues.Add("BeneBankAddressLine3", newValue);
                        else
                            ColsAndValues["BeneBankAddressLine3"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? BeneBankCountry_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneBankCountry_ID") || ColsAndValues["BeneBankCountry_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["BeneBankCountry_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneBankCountry_ID"))
                            ColsAndValues.Add("BeneBankCountry_ID", newValue);
                        else
                            ColsAndValues["BeneBankCountry_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(2) ", CanBeNull = true)]
                public string BeneBankCountryAlpha2
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneBankCountryAlpha2") || ColsAndValues["BeneBankCountryAlpha2"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneBankCountryAlpha2"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneBankCountryAlpha2"))
                            ColsAndValues.Add("BeneBankCountryAlpha2", newValue);
                        else
                            ColsAndValues["BeneBankCountryAlpha2"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(45) ", CanBeNull = true)]
                public string BeneIBankCode
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneIBankCode") || ColsAndValues["BeneIBankCode"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneIBankCode"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneIBankCode"))
                            ColsAndValues.Add("BeneIBankCode", newValue);
                        else
                            ColsAndValues["BeneIBankCode"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(70) ", CanBeNull = true)]
                public string BeneIBankDescription
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneIBankDescription") || ColsAndValues["BeneIBankDescription"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneIBankDescription"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneIBankDescription"))
                            ColsAndValues.Add("BeneIBankDescription", newValue);
                        else
                            ColsAndValues["BeneIBankDescription"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(11) ", CanBeNull = true)]
                public string BeneIBankSWIFT_Address
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneIBankSWIFT_Address") || ColsAndValues["BeneIBankSWIFT_Address"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneIBankSWIFT_Address"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneIBankSWIFT_Address"))
                            ColsAndValues.Add("BeneIBankSWIFT_Address", newValue);
                        else
                            ColsAndValues["BeneIBankSWIFT_Address"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(29) ", CanBeNull = true)]
                public string BeneIBankRoutingCode
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneIBankRoutingCode") || ColsAndValues["BeneIBankRoutingCode"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneIBankRoutingCode"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneIBankRoutingCode"))
                            ColsAndValues.Add("BeneIBankRoutingCode", newValue);
                        else
                            ColsAndValues["BeneIBankRoutingCode"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(34) ", CanBeNull = true)]
                public string BeneIBankAccount
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneIBankAccount") || ColsAndValues["BeneIBankAccount"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneIBankAccount"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneIBankAccount"))
                            ColsAndValues.Add("BeneIBankAccount", newValue);
                        else
                            ColsAndValues["BeneIBankAccount"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(140) ", CanBeNull = true)]
                public string BeneIBankAddressLine1
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneIBankAddressLine1") || ColsAndValues["BeneIBankAddressLine1"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneIBankAddressLine1"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneIBankAddressLine1"))
                            ColsAndValues.Add("BeneIBankAddressLine1", newValue);
                        else
                            ColsAndValues["BeneIBankAddressLine1"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(35) ", CanBeNull = true)]
                public string BeneIBankAddressLine2
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneIBankAddressLine2") || ColsAndValues["BeneIBankAddressLine2"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneIBankAddressLine2"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneIBankAddressLine2"))
                            ColsAndValues.Add("BeneIBankAddressLine2", newValue);
                        else
                            ColsAndValues["BeneIBankAddressLine2"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(35) ", CanBeNull = true)]
                public string BeneIBankAddressLine3
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneIBankAddressLine3") || ColsAndValues["BeneIBankAddressLine3"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneIBankAddressLine3"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneIBankAddressLine3"))
                            ColsAndValues.Add("BeneIBankAddressLine3", newValue);
                        else
                            ColsAndValues["BeneIBankAddressLine3"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? BeneIBankCountry_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneIBankCountry_ID") || ColsAndValues["BeneIBankCountry_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["BeneIBankCountry_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneIBankCountry_ID"))
                            ColsAndValues.Add("BeneIBankCountry_ID", newValue);
                        else
                            ColsAndValues["BeneIBankCountry_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(2) ", CanBeNull = true)]
                public string BeneIBankCountryAlpha2
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneIBankCountryAlpha2") || ColsAndValues["BeneIBankCountryAlpha2"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneIBankCountryAlpha2"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneIBankCountryAlpha2"))
                            ColsAndValues.Add("BeneIBankCountryAlpha2", newValue);
                        else
                            ColsAndValues["BeneIBankCountryAlpha2"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? BeneNotify
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneNotify") || ColsAndValues["BeneNotify"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["BeneNotify"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneNotify"))
                            ColsAndValues.Add("BeneNotify", newValue);
                        else
                            ColsAndValues["BeneNotify"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255) ", CanBeNull = true)]
                public string BeneEmailAddress1
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneEmailAddress1") || ColsAndValues["BeneEmailAddress1"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneEmailAddress1"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneEmailAddress1"))
                            ColsAndValues.Add("BeneEmailAddress1", newValue);
                        else
                            ColsAndValues["BeneEmailAddress1"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255) ", CanBeNull = true)]
                public string BeneEmailAddress2
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneEmailAddress2") || ColsAndValues["BeneEmailAddress2"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneEmailAddress2"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneEmailAddress2"))
                            ColsAndValues.Add("BeneEmailAddress2", newValue);
                        else
                            ColsAndValues["BeneEmailAddress2"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? BeneNotifyLanguage_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneNotifyLanguage_ID") || ColsAndValues["BeneNotifyLanguage_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["BeneNotifyLanguage_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneNotifyLanguage_ID"))
                            ColsAndValues.Add("BeneNotifyLanguage_ID", newValue);
                        else
                            ColsAndValues["BeneNotifyLanguage_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? DirectMail
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DirectMail") || ColsAndValues["DirectMail"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["DirectMail"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DirectMail"))
                            ColsAndValues.Add("DirectMail", newValue);
                        else
                            ColsAndValues["DirectMail"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? ReleaseDate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ReleaseDate") || ColsAndValues["ReleaseDate"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["ReleaseDate"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ReleaseDate"))
                            ColsAndValues.Add("ReleaseDate", newValue);
                        else
                            ColsAndValues["ReleaseDate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? WindowLength
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("WindowLength") || ColsAndValues["WindowLength"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["WindowLength"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("WindowLength"))
                            ColsAndValues.Add("WindowLength", newValue);
                        else
                            ColsAndValues["WindowLength"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? DepositPercent
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DepositPercent") || ColsAndValues["DepositPercent"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["DepositPercent"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DepositPercent"))
                            ColsAndValues.Add("DepositPercent", newValue);
                        else
                            ColsAndValues["DepositPercent"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? DepositInSettlementCurrency
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DepositInSettlementCurrency") || ColsAndValues["DepositInSettlementCurrency"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["DepositInSettlementCurrency"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DepositInSettlementCurrency"))
                            ColsAndValues.Add("DepositInSettlementCurrency", newValue);
                        else
                            ColsAndValues["DepositInSettlementCurrency"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? DepositAmount
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DepositAmount") || ColsAndValues["DepositAmount"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["DepositAmount"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DepositAmount"))
                            ColsAndValues.Add("DepositAmount", newValue);
                        else
                            ColsAndValues["DepositAmount"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? DepositAmount_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DepositAmount_Reporting") || ColsAndValues["DepositAmount_Reporting"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["DepositAmount_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DepositAmount_Reporting"))
                            ColsAndValues.Add("DepositAmount_Reporting", newValue);
                        else
                            ColsAndValues["DepositAmount_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? DepositAmount_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DepositAmount_USD") || ColsAndValues["DepositAmount_USD"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["DepositAmount_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DepositAmount_USD"))
                            ColsAndValues.Add("DepositAmount_USD", newValue);
                        else
                            ColsAndValues["DepositAmount_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? DepositDueDate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("DepositDueDate") || ColsAndValues["DepositDueDate"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["DepositDueDate"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("DepositDueDate"))
                            ColsAndValues.Add("DepositDueDate", newValue);
                        else
                            ColsAndValues["DepositDueDate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? EstInterestEarned
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("EstInterestEarned") || ColsAndValues["EstInterestEarned"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["EstInterestEarned"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("EstInterestEarned"))
                            ColsAndValues.Add("EstInterestEarned", newValue);
                        else
                            ColsAndValues["EstInterestEarned"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? BalanceAmountDue
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BalanceAmountDue") || ColsAndValues["BalanceAmountDue"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["BalanceAmountDue"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BalanceAmountDue"))
                            ColsAndValues.Add("BalanceAmountDue", newValue);
                        else
                            ColsAndValues["BalanceAmountDue"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? BalanceAmount_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BalanceAmount_Reporting") || ColsAndValues["BalanceAmount_Reporting"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["BalanceAmount_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BalanceAmount_Reporting"))
                            ColsAndValues.Add("BalanceAmount_Reporting", newValue);
                        else
                            ColsAndValues["BalanceAmount_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? BalanceAmount_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BalanceAmount_USD") || ColsAndValues["BalanceAmount_USD"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["BalanceAmount_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BalanceAmount_USD"))
                            ColsAndValues.Add("BalanceAmount_USD", newValue);
                        else
                            ColsAndValues["BalanceAmount_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? BalanceDueDate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BalanceDueDate") || ColsAndValues["BalanceDueDate"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["BalanceDueDate"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BalanceDueDate"))
                            ColsAndValues.Add("BalanceDueDate", newValue);
                        else
                            ColsAndValues["BalanceDueDate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? NotificationDate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("NotificationDate") || ColsAndValues["NotificationDate"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["NotificationDate"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("NotificationDate"))
                            ColsAndValues.Add("NotificationDate", newValue);
                        else
                            ColsAndValues["NotificationDate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(53) ", CanBeNull = true)]
                public string EuroConversionReference
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("EuroConversionReference") || ColsAndValues["EuroConversionReference"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["EuroConversionReference"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("EuroConversionReference"))
                            ColsAndValues.Add("EuroConversionReference", newValue);
                        else
                            ColsAndValues["EuroConversionReference"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? IsAvailable
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("IsAvailable") || ColsAndValues["IsAvailable"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["IsAvailable"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("IsAvailable"))
                            ColsAndValues.Add("IsAvailable", newValue);
                        else
                            ColsAndValues["IsAvailable"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? IsReceived
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("IsReceived") || ColsAndValues["IsReceived"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["IsReceived"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("IsReceived"))
                            ColsAndValues.Add("IsReceived", newValue);
                        else
                            ColsAndValues["IsReceived"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Status_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Status_ID") || ColsAndValues["Status_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Status_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Status_ID"))
                            ColsAndValues.Add("Status_ID", newValue);
                        else
                            ColsAndValues["Status_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(50) ", CanBeNull = true)]
                public string StatusDescription
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("StatusDescription") || ColsAndValues["StatusDescription"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["StatusDescription"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("StatusDescription"))
                            ColsAndValues.Add("StatusDescription", newValue);
                        else
                            ColsAndValues["StatusDescription"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? StatusUpdated
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("StatusUpdated") || ColsAndValues["StatusUpdated"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["StatusUpdated"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("StatusUpdated"))
                            ColsAndValues.Add("StatusUpdated", newValue);
                        else
                            ColsAndValues["StatusUpdated"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? StatusUpdatedBy
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("StatusUpdatedBy") || ColsAndValues["StatusUpdatedBy"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["StatusUpdatedBy"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("StatusUpdatedBy"))
                            ColsAndValues.Add("StatusUpdatedBy", newValue);
                        else
                            ColsAndValues["StatusUpdatedBy"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(90) ", CanBeNull = true)]
                public string StatusUpdatedByName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("StatusUpdatedByName") || ColsAndValues["StatusUpdatedByName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["StatusUpdatedByName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("StatusUpdatedByName"))
                            ColsAndValues.Add("StatusUpdatedByName", newValue);
                        else
                            ColsAndValues["StatusUpdatedByName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? initdt
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("initdt") || ColsAndValues["initdt"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["initdt"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("initdt"))
                            ColsAndValues.Add("initdt", newValue);
                        else
                            ColsAndValues["initdt"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? initid
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("initid") || ColsAndValues["initid"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["initid"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("initid"))
                            ColsAndValues.Add("initid", newValue);
                        else
                            ColsAndValues["initid"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(90) ", CanBeNull = true)]
                public string InitName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("InitName") || ColsAndValues["InitName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["InitName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("InitName"))
                            ColsAndValues.Add("InitName", newValue);
                        else
                            ColsAndValues["InitName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? upddt
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("upddt") || ColsAndValues["upddt"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["upddt"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("upddt"))
                            ColsAndValues.Add("upddt", newValue);
                        else
                            ColsAndValues["upddt"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? updid
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("updid") || ColsAndValues["updid"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["updid"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("updid"))
                            ColsAndValues.Add("updid", newValue);
                        else
                            ColsAndValues["updid"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(90) ", CanBeNull = true)]
                public string updName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("updName") || ColsAndValues["updName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["updName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("updName"))
                            ColsAndValues.Add("updName", newValue);
                        else
                            ColsAndValues["updName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? CheckCarrier_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("CheckCarrier_ID") || ColsAndValues["CheckCarrier_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["CheckCarrier_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("CheckCarrier_ID"))
                            ColsAndValues.Add("CheckCarrier_ID", newValue);
                        else
                            ColsAndValues["CheckCarrier_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(35) ", CanBeNull = true)]
                public string BenePostalCode
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BenePostalCode") || ColsAndValues["BenePostalCode"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BenePostalCode"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BenePostalCode"))
                            ColsAndValues.Add("BenePostalCode", newValue);
                        else
                            ColsAndValues["BenePostalCode"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(140) ", CanBeNull = true)]
                public string BeneAlternateShipToName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneAlternateShipToName") || ColsAndValues["BeneAlternateShipToName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneAlternateShipToName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneAlternateShipToName"))
                            ColsAndValues.Add("BeneAlternateShipToName", newValue);
                        else
                            ColsAndValues["BeneAlternateShipToName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(140) ", CanBeNull = true)]
                public string BeneContactName
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneContactName") || ColsAndValues["BeneContactName"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneContactName"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneContactName"))
                            ColsAndValues.Add("BeneContactName", newValue);
                        else
                            ColsAndValues["BeneContactName"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(35) ", CanBeNull = true)]
                public string BeneBankPostalCode
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneBankPostalCode") || ColsAndValues["BeneBankPostalCode"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneBankPostalCode"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneBankPostalCode"))
                            ColsAndValues.Add("BeneBankPostalCode", newValue);
                        else
                            ColsAndValues["BeneBankPostalCode"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(35) ", CanBeNull = true)]
                public string BeneIBankPostalCode
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("BeneIBankPostalCode") || ColsAndValues["BeneIBankPostalCode"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["BeneIBankPostalCode"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("BeneIBankPostalCode"))
                            ColsAndValues.Add("BeneIBankPostalCode", newValue);
                        else
                            ColsAndValues["BeneIBankPostalCode"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? ItemRate_NDec_Inv
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemRate_NDec_Inv") || ColsAndValues["ItemRate_NDec_Inv"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["ItemRate_NDec_Inv"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemRate_NDec_Inv"))
                            ColsAndValues.Add("ItemRate_NDec_Inv", newValue);
                        else
                            ColsAndValues["ItemRate_NDec_Inv"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? RateMultiplier_Inv
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RateMultiplier_Inv") || ColsAndValues["RateMultiplier_Inv"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["RateMultiplier_Inv"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RateMultiplier_Inv"))
                            ColsAndValues.Add("RateMultiplier_Inv", newValue);
                        else
                            ColsAndValues["RateMultiplier_Inv"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(50) ", CanBeNull = true)]
                public string OptionContractId
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OptionContractId") || ColsAndValues["OptionContractId"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["OptionContractId"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OptionContractId"))
                            ColsAndValues.Add("OptionContractId", newValue);
                        else
                            ColsAndValues["OptionContractId"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? OptionLeg
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OptionLeg") || ColsAndValues["OptionLeg"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["OptionLeg"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OptionLeg"))
                            ColsAndValues.Add("OptionLeg", newValue);
                        else
                            ColsAndValues["OptionLeg"] = newValue;
                    }
                }
            } //end row
        } //end table
        public partial class TRRawDetailValueDate : StaticDataTable
        {
            public override string Name { get { return "TRRawDetailValueDate"; } }
            public override Type RowType { get { return typeof(TRRawDetailValueDateRow); } }

            public TRRawDetailValueDate() : base()
            {
            }

            [global::System.Data.Linq.Mapping.TableAttribute(Name = "TRRawDetailValueDate")]
            public partial class TRRawDetailValueDateRow : StaticDataRow
            {

                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
                public int OrderDetail_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OrderDetail_ID") || ColsAndValues["OrderDetail_ID"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["OrderDetail_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OrderDetail_ID"))
                            ColsAndValues.Add("OrderDetail_ID", newValue);
                        else
                            ColsAndValues["OrderDetail_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = false)]
                public DateTimeWrapper RequestedValueDate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RequestedValueDate") || ColsAndValues["RequestedValueDate"] == ValueContainer.Null)
                            return default(DateTimeWrapper);

                        return (DateTimeWrapper)ColsAndValues["RequestedValueDate"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RequestedValueDate"))
                            ColsAndValues.Add("RequestedValueDate", newValue);
                        else
                            ColsAndValues["RequestedValueDate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? CurrentValueDate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("CurrentValueDate") || ColsAndValues["CurrentValueDate"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["CurrentValueDate"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("CurrentValueDate"))
                            ColsAndValues.Add("CurrentValueDate", newValue);
                        else
                            ColsAndValues["CurrentValueDate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = false)]
                public DateTimeWrapper initdt
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("initdt") || ColsAndValues["initdt"] == ValueContainer.Null)
                            return default(DateTimeWrapper);

                        return (DateTimeWrapper)ColsAndValues["initdt"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("initdt"))
                            ColsAndValues.Add("initdt", newValue);
                        else
                            ColsAndValues["initdt"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false)]
                public int initid
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("initid") || ColsAndValues["initid"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["initid"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("initid"))
                            ColsAndValues.Add("initid", newValue);
                        else
                            ColsAndValues["initid"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = false)]
                public DateTimeWrapper upddt
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("upddt") || ColsAndValues["upddt"] == ValueContainer.Null)
                            return default(DateTimeWrapper);

                        return (DateTimeWrapper)ColsAndValues["upddt"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("upddt"))
                            ColsAndValues.Add("upddt", newValue);
                        else
                            ColsAndValues["upddt"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false)]
                public int updid
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("updid") || ColsAndValues["updid"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["updid"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("updid"))
                            ColsAndValues.Add("updid", newValue);
                        else
                            ColsAndValues["updid"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? GMTDeadline
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("GMTDeadline") || ColsAndValues["GMTDeadline"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["GMTDeadline"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("GMTDeadline"))
                            ColsAndValues.Add("GMTDeadline", newValue);
                        else
                            ColsAndValues["GMTDeadline"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? GMTCutoff
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("GMTCutoff") || ColsAndValues["GMTCutoff"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["GMTCutoff"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("GMTCutoff"))
                            ColsAndValues.Add("GMTCutoff", newValue);
                        else
                            ColsAndValues["GMTCutoff"] = newValue;
                    }
                }
            } //end row
        } //end table
        public partial class ContributingItemHistory : StaticDataTable
        {
            public override string Name { get { return "ContributingItemHistory"; } }
            public override Type RowType { get { return typeof(ContributingItemHistoryRow); } }

            public ContributingItemHistory() : base()
            {
            }

            [global::System.Data.Linq.Mapping.TableAttribute(Name = "ContributingItemHistory")]
            public partial class ContributingItemHistoryRow : StaticDataRow
            {

                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
                public int OrderDetail_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OrderDetail_ID") || ColsAndValues["OrderDetail_ID"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["OrderDetail_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OrderDetail_ID"))
                            ColsAndValues.Add("OrderDetail_ID", newValue);
                        else
                            ColsAndValues["OrderDetail_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
                public int ItemNo
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemNo") || ColsAndValues["ItemNo"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["ItemNo"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemNo"))
                            ColsAndValues.Add("ItemNo", newValue);
                        else
                            ColsAndValues["ItemNo"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false)]
                public int ClientOrder_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ClientOrder_ID") || ColsAndValues["ClientOrder_ID"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["ClientOrder_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ClientOrder_ID"))
                            ColsAndValues.Add("ClientOrder_ID", newValue);
                        else
                            ColsAndValues["ClientOrder_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false)]
                public int FundedBy
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("FundedBy") || ColsAndValues["FundedBy"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["FundedBy"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("FundedBy"))
                            ColsAndValues.Add("FundedBy", newValue);
                        else
                            ColsAndValues["FundedBy"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? Amount
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Amount") || ColsAndValues["Amount"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["Amount"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Amount"))
                            ColsAndValues.Add("Amount", newValue);
                        else
                            ColsAndValues["Amount"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? AmountInSc
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("AmountInSc") || ColsAndValues["AmountInSc"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["AmountInSc"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("AmountInSc"))
                            ColsAndValues.Add("AmountInSc", newValue);
                        else
                            ColsAndValues["AmountInSc"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float NOT NULL", CanBeNull = false)]
                public double Rate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Rate") || ColsAndValues["Rate"] == ValueContainer.Null)
                            return default(double);

                        return (double)ColsAndValues["Rate"].Value;
                    }
                    set
                    {
                        var newValue = (default(double) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Rate"))
                            ColsAndValues.Add("Rate", newValue);
                        else
                            ColsAndValues["Rate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? Quote_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Quote_ID") || ColsAndValues["Quote_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["Quote_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Quote_ID"))
                            ColsAndValues.Add("Quote_ID", newValue);
                        else
                            ColsAndValues["Quote_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ItemRateIsPer
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemRateIsPer") || ColsAndValues["ItemRateIsPer"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ItemRateIsPer"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemRateIsPer"))
                            ColsAndValues.Add("ItemRateIsPer", newValue);
                        else
                            ColsAndValues["ItemRateIsPer"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? RateMultiplier
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RateMultiplier") || ColsAndValues["RateMultiplier"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["RateMultiplier"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RateMultiplier"))
                            ColsAndValues.Add("RateMultiplier", newValue);
                        else
                            ColsAndValues["RateMultiplier"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ItemRate_NDec
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemRate_NDec") || ColsAndValues["ItemRate_NDec"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ItemRate_NDec"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemRate_NDec"))
                            ColsAndValues.Add("ItemRate_NDec", newValue);
                        else
                            ColsAndValues["ItemRate_NDec"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float NOT NULL", CanBeNull = false)]
                public double Extension
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Extension") || ColsAndValues["Extension"] == ValueContainer.Null)
                            return default(double);

                        return (double)ColsAndValues["Extension"].Value;
                    }
                    set
                    {
                        var newValue = (default(double) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Extension"))
                            ColsAndValues.Add("Extension", newValue);
                        else
                            ColsAndValues["Extension"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float NOT NULL", CanBeNull = false)]
                public double Extension_Reporting
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Extension_Reporting") || ColsAndValues["Extension_Reporting"] == ValueContainer.Null)
                            return default(double);

                        return (double)ColsAndValues["Extension_Reporting"].Value;
                    }
                    set
                    {
                        var newValue = (default(double) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Extension_Reporting"))
                            ColsAndValues.Add("Extension_Reporting", newValue);
                        else
                            ColsAndValues["Extension_Reporting"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float NOT NULL", CanBeNull = false)]
                public double Extension_USD
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("Extension_USD") || ColsAndValues["Extension_USD"] == ValueContainer.Null)
                            return default(double);

                        return (double)ColsAndValues["Extension_USD"].Value;
                    }
                    set
                    {
                        var newValue = (default(double) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("Extension_USD"))
                            ColsAndValues.Add("Extension_USD", newValue);
                        else
                            ColsAndValues["Extension_USD"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? RelatedOrderDetail_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RelatedOrderDetail_ID") || ColsAndValues["RelatedOrderDetail_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["RelatedOrderDetail_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RelatedOrderDetail_ID"))
                            ColsAndValues.Add("RelatedOrderDetail_ID", newValue);
                        else
                            ColsAndValues["RelatedOrderDetail_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = false)]
                public DateTimeWrapper initdt
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("initdt") || ColsAndValues["initdt"] == ValueContainer.Null)
                            return default(DateTimeWrapper);

                        return (DateTimeWrapper)ColsAndValues["initdt"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("initdt"))
                            ColsAndValues.Add("initdt", newValue);
                        else
                            ColsAndValues["initdt"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false)]
                public int initid
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("initid") || ColsAndValues["initid"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["initid"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("initid"))
                            ColsAndValues.Add("initid", newValue);
                        else
                            ColsAndValues["initid"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = false)]
                public DateTimeWrapper upddt
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("upddt") || ColsAndValues["upddt"] == ValueContainer.Null)
                            return default(DateTimeWrapper);

                        return (DateTimeWrapper)ColsAndValues["upddt"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("upddt"))
                            ColsAndValues.Add("upddt", newValue);
                        else
                            ColsAndValues["upddt"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false)]
                public int updid
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("updid") || ColsAndValues["updid"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["updid"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("updid"))
                            ColsAndValues.Add("updid", newValue);
                        else
                            ColsAndValues["updid"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "bit ", CanBeNull = true)]
                public bool? PreDelivery
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("PreDelivery") || ColsAndValues["PreDelivery"] == ValueContainer.Null)
                            return default(bool?);

                        return (bool?)ColsAndValues["PreDelivery"].Value;
                    }
                    set
                    {
                        var newValue = (default(bool?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("PreDelivery"))
                            ColsAndValues.Add("PreDelivery", newValue);
                        else
                            ColsAndValues["PreDelivery"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ForwardRate
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ForwardRate") || ColsAndValues["ForwardRate"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ForwardRate"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ForwardRate"))
                            ColsAndValues.Add("ForwardRate", newValue);
                        else
                            ColsAndValues["ForwardRate"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? ForwardRateIsPer
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ForwardRateIsPer") || ColsAndValues["ForwardRateIsPer"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["ForwardRateIsPer"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ForwardRateIsPer"))
                            ColsAndValues.Add("ForwardRateIsPer", newValue);
                        else
                            ColsAndValues["ForwardRateIsPer"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ForwardRateMultiplier
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ForwardRateMultiplier") || ColsAndValues["ForwardRateMultiplier"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ForwardRateMultiplier"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ForwardRateMultiplier"))
                            ColsAndValues.Add("ForwardRateMultiplier", newValue);
                        else
                            ColsAndValues["ForwardRateMultiplier"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ForwardRate_NDec
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ForwardRate_NDec") || ColsAndValues["ForwardRate_NDec"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ForwardRate_NDec"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ForwardRate_NDec"))
                            ColsAndValues.Add("ForwardRate_NDec", newValue);
                        else
                            ColsAndValues["ForwardRate_NDec"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "float ", CanBeNull = true)]
                public double? ForwardExtension
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ForwardExtension") || ColsAndValues["ForwardExtension"] == ValueContainer.Null)
                            return default(double?);

                        return (double?)ColsAndValues["ForwardExtension"].Value;
                    }
                    set
                    {
                        var newValue = (default(double?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ForwardExtension"))
                            ColsAndValues.Add("ForwardExtension", newValue);
                        else
                            ColsAndValues["ForwardExtension"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? ItemRate_NDec_Inv
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ItemRate_NDec_Inv") || ColsAndValues["ItemRate_NDec_Inv"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["ItemRate_NDec_Inv"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ItemRate_NDec_Inv"))
                            ColsAndValues.Add("ItemRate_NDec_Inv", newValue);
                        else
                            ColsAndValues["ItemRate_NDec_Inv"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? RateMultiplier_Inv
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("RateMultiplier_Inv") || ColsAndValues["RateMultiplier_Inv"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["RateMultiplier_Inv"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("RateMultiplier_Inv"))
                            ColsAndValues.Add("RateMultiplier_Inv", newValue);
                        else
                            ColsAndValues["RateMultiplier_Inv"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? ForwardRate_NDec_Inv
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ForwardRate_NDec_Inv") || ColsAndValues["ForwardRate_NDec_Inv"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["ForwardRate_NDec_Inv"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ForwardRate_NDec_Inv"))
                            ColsAndValues.Add("ForwardRate_NDec_Inv", newValue);
                        else
                            ColsAndValues["ForwardRate_NDec_Inv"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "smallint ", CanBeNull = true)]
                public short? ForwardRateMultiplier_Inv
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ForwardRateMultiplier_Inv") || ColsAndValues["ForwardRateMultiplier_Inv"] == ValueContainer.Null)
                            return default(short?);

                        return (short?)ColsAndValues["ForwardRateMultiplier_Inv"].Value;
                    }
                    set
                    {
                        var newValue = (default(short?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ForwardRateMultiplier_Inv"))
                            ColsAndValues.Add("ForwardRateMultiplier_Inv", newValue);
                        else
                            ColsAndValues["ForwardRateMultiplier_Inv"] = newValue;
                    }
                }
            } //end row
        } //end table
    }
}



