
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `VMS`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.;Initial Catalog=work_WUBS2_Trunk_VMS;Integrated Security=True`
//     Schema:                 ``
//     Include Views:          `False`


// -----------------------------------------------------------------------------------------
// LoadTables: Failed to read database schema - A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: Named Pipes Provider, error: 40 - Could not open a connection to SQL Server)
// -----------------------------------------------------------------------------------------





















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `VMS`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.;Initial Catalog=work_WUBS2_Trunk_VMS;Integrated Security=True`
//     Schema:                 ``
//     Include Views:          `False`


using System;

namespace WUBS.Cct.DataExamples.TestDataContainer
{
    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "VMS")]
    public partial class VMSDB : StaticDataDatabase
    {
        public override string Name { get { return "VMS"; } }

        public VMSDB() : base()
        {
            Tables.Add("VmsEventLog", new VmsEventLog());

            InsertStaticData();
        }

        public System.Data.Linq.Table<VmsEventLog.VmsEventLogRow> VmsEventLogTable
        {
            get
            {
                return this.GetTable<VmsEventLog.VmsEventLogRow>();
            }
        }

        public partial class VmsEventLog : StaticDataTable
        {
            public override string Name { get { return "VmsEventLog"; } }
            public override Type RowType { get { return typeof(VmsEventLogRow); } }

            public VmsEventLog() : base()
            {
            }

            [global::System.Data.Linq.Mapping.TableAttribute(Name = "VmsEventLog")]
            public partial class VmsEventLogRow : StaticDataRow
            {

                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
                public int LOG_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("LOG_ID") || ColsAndValues["LOG_ID"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["LOG_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("LOG_ID"))
                            ColsAndValues.Add("LOG_ID", newValue);
                        else
                            ColsAndValues["LOG_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false)]
                public int ClientOrder_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ClientOrder_ID") || ColsAndValues["ClientOrder_ID"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["ClientOrder_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ClientOrder_ID"))
                            ColsAndValues.Add("ClientOrder_ID", newValue);
                        else
                            ColsAndValues["ClientOrder_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int NOT NULL", CanBeNull = false)]
                public int OrderDetail_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("OrderDetail_ID") || ColsAndValues["OrderDetail_ID"] == ValueContainer.Null)
                            return default(int);

                        return (int)ColsAndValues["OrderDetail_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("OrderDetail_ID"))
                            ColsAndValues.Add("OrderDetail_ID", newValue);
                        else
                            ColsAndValues["OrderDetail_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? NewClientOrder_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("NewClientOrder_ID") || ColsAndValues["NewClientOrder_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["NewClientOrder_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("NewClientOrder_ID"))
                            ColsAndValues.Add("NewClientOrder_ID", newValue);
                        else
                            ColsAndValues["NewClientOrder_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? NewOrderDetail_ID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("NewOrderDetail_ID") || ColsAndValues["NewOrderDetail_ID"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["NewOrderDetail_ID"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("NewOrderDetail_ID"))
                            ColsAndValues.Add("NewOrderDetail_ID", newValue);
                        else
                            ColsAndValues["NewOrderDetail_ID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? ITEM_NO
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("ITEM_NO") || ColsAndValues["ITEM_NO"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["ITEM_NO"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("ITEM_NO"))
                            ColsAndValues.Add("ITEM_NO", newValue);
                        else
                            ColsAndValues["ITEM_NO"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(32) ", CanBeNull = true)]
                public string EVENT
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("EVENT") || ColsAndValues["EVENT"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["EVENT"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("EVENT"))
                            ColsAndValues.Add("EVENT", newValue);
                        else
                            ColsAndValues["EVENT"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "int ", CanBeNull = true)]
                public int? PROCESSED
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("PROCESSED") || ColsAndValues["PROCESSED"] == ValueContainer.Null)
                            return default(int?);

                        return (int?)ColsAndValues["PROCESSED"].Value;
                    }
                    set
                    {
                        var newValue = (default(int?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("PROCESSED"))
                            ColsAndValues.Add("PROCESSED", newValue);
                        else
                            ColsAndValues["PROCESSED"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? PROCESSED_TIME
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("PROCESSED_TIME") || ColsAndValues["PROCESSED_TIME"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["PROCESSED_TIME"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("PROCESSED_TIME"))
                            ColsAndValues.Add("PROCESSED_TIME", newValue);
                        else
                            ColsAndValues["PROCESSED_TIME"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(16) ", CanBeNull = true)]
                public string INITID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("INITID") || ColsAndValues["INITID"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["INITID"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("INITID"))
                            ColsAndValues.Add("INITID", newValue);
                        else
                            ColsAndValues["INITID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? INITDT
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("INITDT") || ColsAndValues["INITDT"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["INITDT"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("INITDT"))
                            ColsAndValues.Add("INITDT", newValue);
                        else
                            ColsAndValues["INITDT"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(16) ", CanBeNull = true)]
                public string UPDID
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("UPDID") || ColsAndValues["UPDID"] == ValueContainer.Null)
                            return default(string);

                        return (string)ColsAndValues["UPDID"].Value;
                    }
                    set
                    {
                        var newValue = (default(string) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("UPDID"))
                            ColsAndValues.Add("UPDID", newValue);
                        else
                            ColsAndValues["UPDID"] = newValue;
                    }
                }
                [global::System.Data.Linq.Mapping.ColumnAttribute(DbType = "nvarchar(255)", CanBeNull = true)]
                public DateTimeWrapper? UPDDT
                {
                    get
                    {
                        if (!ColsAndValues.ContainsKey("UPDDT") || ColsAndValues["UPDDT"] == ValueContainer.Null)
                            return default(DateTimeWrapper?);

                        return (DateTimeWrapper?)ColsAndValues["UPDDT"].Value;
                    }
                    set
                    {
                        var newValue = (default(DateTimeWrapper?) != value) ? new ValueContainer { Type = value.GetType(), Value = value } : ValueContainer.Null;

                        if (!ColsAndValues.ContainsKey("UPDDT"))
                            ColsAndValues.Add("UPDDT", newValue);
                        else
                            ColsAndValues["UPDDT"] = newValue;
                    }
                }
            } //end row
        } //end table
    }
}



